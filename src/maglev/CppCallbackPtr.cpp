// Generated by Haxe 4.1.1
#include <hxcpp.h>

#ifndef INCLUDED_f1f713c9e000f5d3
#define INCLUDED_f1f713c9e000f5d3
#include "array"
#endif
#ifndef INCLUDED_7625ac700f09f214
#define INCLUDED_7625ac700f09f214
#include "functional"
#endif
#ifndef INCLUDED_Std
#include <maglev/Std.h>
#endif
#ifndef INCLUDED_cpp_Finalizable
#include <maglev/cpp/Finalizable.h>
#endif
#ifndef INCLUDED_maglev_CppAny
#include <maglev/maglev/CppAny.h>
#endif
#ifndef INCLUDED_maglev_CppCallbackPtr
#include <maglev/maglev/CppCallbackPtr.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_13da0074370950dc_49_new,"maglev.CppCallbackPtr","new",0x2eaea39c,"maglev.CppCallbackPtr.new","maglev/CppCallback.hx",49,0x7d5fae5b)
HX_LOCAL_STACK_FRAME(_hx_pos_13da0074370950dc_55_call,"maglev.CppCallbackPtr","call",0xa2d819e2,"maglev.CppCallbackPtr.call","maglev/CppCallback.hx",55,0x7d5fae5b)
HX_LOCAL_STACK_FRAME(_hx_pos_13da0074370950dc_60_finalize,"maglev.CppCallbackPtr","finalize",0xcb2c38e2,"maglev.CppCallbackPtr.finalize","maglev/CppCallback.hx",60,0x7d5fae5b)
HX_LOCAL_STACK_FRAME(_hx_pos_13da0074370950dc_63_toString,"maglev.CppCallbackPtr","toString",0x0e60c3f0,"maglev.CppCallbackPtr.toString","maglev/CppCallback.hx",63,0x7d5fae5b)
namespace maglev{

void CppCallbackPtr_obj::__construct(::cpp::Function<  ::maglev::CppAny  ( std::vector<CppAny>) > inFunc){
            	HX_STACKFRAME(&_hx_pos_13da0074370950dc_49_new)
HXLINE(  50)		super::__construct(null());
HXLINE(  51)		this->lambda = (new std::function<CppAny(std::vector<CppAny>)>(inFunc));
            	}

Dynamic CppCallbackPtr_obj::__CreateEmpty() { return new CppCallbackPtr_obj; }

void *CppCallbackPtr_obj::_hx_vtable = 0;

Dynamic CppCallbackPtr_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CppCallbackPtr_obj > _hx_result = new CppCallbackPtr_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool CppCallbackPtr_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3f7e95f4) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x3f7e95f4;
	} else {
		return inClassId==(int)0x5b6e46de;
	}
}

 ::maglev::CppAny CppCallbackPtr_obj::call( std::vector<CppAny> args){
            	HX_STACKFRAME(&_hx_pos_13da0074370950dc_55_call)
HXDLIN(  55)		return this->lambda->get_ref().operator()(args);
            	}


void CppCallbackPtr_obj::finalize(){
            	HX_STACKFRAME(&_hx_pos_13da0074370950dc_60_finalize)
HXDLIN(  60)		this->lambda->destroy();
            	}


::String CppCallbackPtr_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_13da0074370950dc_63_toString)
HXDLIN(  63)		return ((HX_("functional(",c5,4c,91,02) + ::Std_obj::string(this->lambda)) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(CppCallbackPtr_obj,toString,return )


::hx::ObjectPtr< CppCallbackPtr_obj > CppCallbackPtr_obj::__new(::cpp::Function<  ::maglev::CppAny  ( std::vector<CppAny>) > inFunc) {
	::hx::ObjectPtr< CppCallbackPtr_obj > __this = new CppCallbackPtr_obj();
	__this->__construct(inFunc);
	return __this;
}

::hx::ObjectPtr< CppCallbackPtr_obj > CppCallbackPtr_obj::__alloc(::hx::Ctx *_hx_ctx,::cpp::Function<  ::maglev::CppAny  ( std::vector<CppAny>) > inFunc) {
	CppCallbackPtr_obj *__this = (CppCallbackPtr_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CppCallbackPtr_obj), true, "maglev.CppCallbackPtr"));
	*(void **)__this = CppCallbackPtr_obj::_hx_vtable;
	__this->__construct(inFunc);
	return __this;
}

CppCallbackPtr_obj::CppCallbackPtr_obj()
{
}

void CppCallbackPtr_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CppCallbackPtr);
	HX_MARK_MEMBER_NAME(lambda,"lambda");
	HX_MARK_END_CLASS();
}

void CppCallbackPtr_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(lambda,"lambda");
}

::hx::Val CppCallbackPtr_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"lambda") ) { return ::hx::Val( lambda ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"finalize") ) { return ::hx::Val( finalize_dyn() ); }
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val CppCallbackPtr_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"lambda") ) { lambda=inValue.Cast< ::cpp::Pointer<  std::function<CppAny(std::vector<CppAny>)> > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CppCallbackPtr_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("lambda",07,33,c0,50));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CppCallbackPtr_obj_sMemberStorageInfo[] = {
	{::hx::fsUnknown /* ::cpp::Pointer<  std::function<CppAny(std::vector<CppAny>)> > */ ,(int)offsetof(CppCallbackPtr_obj,lambda),HX_("lambda",07,33,c0,50)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *CppCallbackPtr_obj_sStaticStorageInfo = 0;
#endif

static ::String CppCallbackPtr_obj_sMemberFields[] = {
	HX_("lambda",07,33,c0,50),
	HX_("finalize",9e,45,3a,f5),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

::hx::Class CppCallbackPtr_obj::__mClass;

void CppCallbackPtr_obj::__register()
{
	CppCallbackPtr_obj _hx_dummy;
	CppCallbackPtr_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("maglev.CppCallbackPtr",aa,e5,7d,e8);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CppCallbackPtr_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CppCallbackPtr_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CppCallbackPtr_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CppCallbackPtr_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace maglev
