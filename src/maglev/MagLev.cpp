// Generated by Haxe 4.1.1
#include <hxcpp.h>

#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_maglev_MagLev
#include <maglev/MagLev.h>
#endif
#ifndef INCLUDED_maglev_MagLevAny
#include <maglev/MagLevAny.h>
#endif
#ifndef INCLUDED_maglev_MagLevArray
#include <maglev/MagLevArray.h>
#endif
#ifndef INCLUDED_maglev_MagLevError
#include <maglev/MagLevError.h>
#endif
#ifndef INCLUDED_maglev_MagLevFunction
#include <maglev/MagLevFunction.h>
#endif
#ifndef INCLUDED_maglev_MagLevNull
#include <maglev/MagLevNull.h>
#endif
#ifndef INCLUDED_maglev_MagLevNumber
#include <maglev/MagLevNumber.h>
#endif
#ifndef INCLUDED_maglev_MagLevResult
#include <maglev/MagLevResult.h>
#endif
#ifndef INCLUDED_maglev_MagLevString
#include <maglev/MagLevString.h>
#endif
#ifndef INCLUDED_maglev_Telemetry
#include <maglev/Telemetry.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_74be3df12ab3af58_58_new,"maglev.MagLev","new",0xda2b4be0,"maglev.MagLev.new","maglev/MagLev.hx",58,0x5b19476f)
HX_DEFINE_STACK_FRAME(_hx_pos_74be3df12ab3af58_69_new,"maglev.MagLev","new",0xda2b4be0,"maglev.MagLev.new","maglev/MagLev.hx",69,0x5b19476f)
HX_DEFINE_STACK_FRAME(_hx_pos_74be3df12ab3af58_50_new,"maglev.MagLev","new",0xda2b4be0,"maglev.MagLev.new","maglev/MagLev.hx",50,0x5b19476f)
HX_LOCAL_STACK_FRAME(_hx_pos_74be3df12ab3af58_90_register,"maglev.MagLev","register",0xfe787ae3,"maglev.MagLev.register","maglev/MagLev.hx",90,0x5b19476f)
HX_LOCAL_STACK_FRAME(_hx_pos_74be3df12ab3af58_94_call,"maglev.MagLev","call",0x046ead1e,"maglev.MagLev.call","maglev/MagLev.hx",94,0x5b19476f)
HX_LOCAL_STACK_FRAME(_hx_pos_74be3df12ab3af58_102_listen,"maglev.MagLev","listen",0x385c7cc7,"maglev.MagLev.listen","maglev/MagLev.hx",102,0x5b19476f)
HX_LOCAL_STACK_FRAME(_hx_pos_74be3df12ab3af58_110_emit,"maglev.MagLev","emit",0x05ca32d3,"maglev.MagLev.emit","maglev/MagLev.hx",110,0x5b19476f)
HX_LOCAL_STACK_FRAME(_hx_pos_74be3df12ab3af58_82_getInstance,"maglev.MagLev","getInstance",0xfed3ddcb,"maglev.MagLev.getInstance","maglev/MagLev.hx",82,0x5b19476f)
HX_LOCAL_STACK_FRAME(_hx_pos_74be3df12ab3af58_52_boot,"maglev.MagLev","boot",0x03d018b2,"maglev.MagLev.boot","maglev/MagLev.hx",52,0x5b19476f)
namespace maglev{

void MagLev_obj::__construct(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::maglev::Telemetry,t) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_GC_STACKFRAME(&_hx_pos_74be3df12ab3af58_58_new)
HXLINE(  59)			::Array< ::String > strings = ::Array_obj< ::String >::__new();
HXLINE(  60)			int i = 0;
HXLINE(  61)			while((i < args->size())){
HXLINE(  62)				 ::maglev::MagLevAny arg = args->get(i);
HXLINE(  63)				strings->push(::hx::TCast<  ::maglev::MagLevString >::cast(arg)->getString());
HXLINE(  64)				i = (i + 1);
            			}
HXLINE(  66)			t->addInfo(strings);
HXLINE(  67)			return ::maglev::MagLevResult_obj::fromResult(::maglev::MagLevNull_obj::create());
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::maglev::Telemetry,t) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_GC_STACKFRAME(&_hx_pos_74be3df12ab3af58_69_new)
HXLINE(  70)			::Array< ::String > strings = ::Array_obj< ::String >::__new();
HXLINE(  71)			int i = 0;
HXLINE(  72)			while((i < args->size())){
HXLINE(  73)				 ::maglev::MagLevAny arg = args->get(i);
HXLINE(  74)				strings->push(::hx::TCast<  ::maglev::MagLevString >::cast(arg)->getString());
HXLINE(  75)				i = (i + 1);
            			}
HXLINE(  77)			t->send(strings);
HXLINE(  78)			return ::maglev::MagLevResult_obj::fromResult(::maglev::MagLevNull_obj::create());
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_GC_STACKFRAME(&_hx_pos_74be3df12ab3af58_50_new)
HXLINE(  54)		this->_listeners =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  53)		this->_methods =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE(  57)		 ::maglev::Telemetry t =  ::maglev::Telemetry_obj::__alloc( HX_CTX );
HXLINE(  58)		this->_hx_register(HX_("MindPowered.Telemetry.AddInfo",9e,ab,82,cc),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_0(t))));
HXLINE(  69)		this->_hx_register(HX_("MindPowered.Telemetry.Send",79,51,dc,d8),::maglev::MagLevFunction_obj::fromFunction( ::Dynamic(new _hx_Closure_1(t))));
            	}

Dynamic MagLev_obj::__CreateEmpty() { return new MagLev_obj; }

void *MagLev_obj::_hx_vtable = 0;

Dynamic MagLev_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MagLev_obj > _hx_result = new MagLev_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MagLev_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x671c69d4;
}

void MagLev_obj::_hx_register(::String method, ::maglev::MagLevFunction callback){
            	HX_STACKFRAME(&_hx_pos_74be3df12ab3af58_90_register)
HXDLIN(  90)		this->_methods->set(method,callback);
            	}


HX_DEFINE_DYNAMIC_FUNC2(MagLev_obj,_hx_register,(void))

 ::maglev::MagLevResult MagLev_obj::call(::String method, ::maglev::MagLevArray args){
            	HX_GC_STACKFRAME(&_hx_pos_74be3df12ab3af58_94_call)
HXDLIN(  94)		if (this->_methods->exists(method)) {
HXLINE(  95)			return ( ( ::maglev::MagLevFunction)(this->_methods->get(method)) )->call(args);
            		}
            		else {
HXLINE(  97)			 ::maglev::MagLevNumber err =  ::maglev::MagLevNumber_obj::__alloc( HX_CTX ,( (Float)(0) ));
HXDLIN(  97)			 ::maglev::MagLevString err1 =  ::maglev::MagLevString_obj::__alloc( HX_CTX ,((HX_("Method '",48,09,e1,28) + method) + HX_("' not registered",48,2b,e6,b7)));
HXDLIN(  97)			 ::maglev::MagLevError err2 =  ::maglev::MagLevError_obj::__alloc( HX_CTX ,err,err1, ::maglev::MagLevNull_obj::__alloc( HX_CTX ));
HXLINE(  98)			return ::maglev::MagLevResult_obj::fromError(err2);
            		}
HXLINE(  94)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC2(MagLev_obj,call,return )

void MagLev_obj::listen(::String event, ::maglev::MagLevFunction callback){
            	HX_STACKFRAME(&_hx_pos_74be3df12ab3af58_102_listen)
HXLINE( 103)		if (!(this->_listeners->exists(event))) {
HXLINE( 104)			::Dynamic this1 = this->_listeners;
HXDLIN( 104)			::Array< ::Dynamic> v = ::Array_obj< ::Dynamic>::__new();
HXDLIN( 104)			( ( ::haxe::ds::StringMap)(this1) )->set(event,v);
            		}
HXLINE( 106)		( (::Array< ::Dynamic>)(this->_listeners->get(event)) )->push(callback);
            	}


HX_DEFINE_DYNAMIC_FUNC2(MagLev_obj,listen,(void))

void MagLev_obj::emit(::String event, ::maglev::MagLevArray args){
            	HX_STACKFRAME(&_hx_pos_74be3df12ab3af58_110_emit)
HXDLIN( 110)		if (this->_listeners->exists(event)) {
HXLINE( 111)			::Array< ::Dynamic> listeners = ( (::Array< ::Dynamic>)(this->_listeners->get(event)) );
HXLINE( 112)			{
HXLINE( 112)				int _g = 0;
HXDLIN( 112)				while((_g < listeners->length)){
HXLINE( 112)					 ::maglev::MagLevFunction listener = listeners->__get(_g).StaticCast<  ::maglev::MagLevFunction >();
HXDLIN( 112)					_g = (_g + 1);
HXLINE( 113)					listener->call(args);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(MagLev_obj,emit,(void))

 ::haxe::ds::StringMap MagLev_obj::_instances;

 ::maglev::MagLev MagLev_obj::getInstance(::String key){
            	HX_GC_STACKFRAME(&_hx_pos_74be3df12ab3af58_82_getInstance)
HXLINE(  83)		if (!(::maglev::MagLev_obj::_instances->exists(key))) {
HXLINE(  84)			::Dynamic this1 = ::maglev::MagLev_obj::_instances;
HXDLIN(  84)			 ::maglev::MagLev v =  ::maglev::MagLev_obj::__alloc( HX_CTX );
HXDLIN(  84)			( ( ::haxe::ds::StringMap)(this1) )->set(key,v);
            		}
HXLINE(  86)		return ( ( ::maglev::MagLev)(::maglev::MagLev_obj::_instances->get(key)) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MagLev_obj,getInstance,return )


::hx::ObjectPtr< MagLev_obj > MagLev_obj::__new() {
	::hx::ObjectPtr< MagLev_obj > __this = new MagLev_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< MagLev_obj > MagLev_obj::__alloc(::hx::Ctx *_hx_ctx) {
	MagLev_obj *__this = (MagLev_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MagLev_obj), true, "maglev.MagLev"));
	*(void **)__this = MagLev_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

MagLev_obj::MagLev_obj()
{
}

void MagLev_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MagLev);
	HX_MARK_MEMBER_NAME(_methods,"_methods");
	HX_MARK_MEMBER_NAME(_listeners,"_listeners");
	HX_MARK_END_CLASS();
}

void MagLev_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(_methods,"_methods");
	HX_VISIT_MEMBER_NAME(_listeners,"_listeners");
}

::hx::Val MagLev_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"call") ) { return ::hx::Val( call_dyn() ); }
		if (HX_FIELD_EQ(inName,"emit") ) { return ::hx::Val( emit_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"listen") ) { return ::hx::Val( listen_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"_methods") ) { return ::hx::Val( _methods ); }
		if (HX_FIELD_EQ(inName,"register") ) { return ::hx::Val( _hx_register_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_listeners") ) { return ::hx::Val( _listeners ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MagLev_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"_instances") ) { outValue = ( _instances ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"getInstance") ) { outValue = getInstance_dyn(); return true; }
	}
	return false;
}

::hx::Val MagLev_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 8:
		if (HX_FIELD_EQ(inName,"_methods") ) { _methods=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"_listeners") ) { _listeners=inValue.Cast<  ::haxe::ds::StringMap >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool MagLev_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 10:
		if (HX_FIELD_EQ(inName,"_instances") ) { _instances=ioValue.Cast<  ::haxe::ds::StringMap >(); return true; }
	}
	return false;
}

void MagLev_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("_methods",f3,67,f5,5f));
	outFields->push(HX_("_listeners",40,e1,30,4f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MagLev_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(MagLev_obj,_methods),HX_("_methods",f3,67,f5,5f)},
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(int)offsetof(MagLev_obj,_listeners),HX_("_listeners",40,e1,30,4f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo MagLev_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::haxe::ds::StringMap */ ,(void *) &MagLev_obj::_instances,HX_("_instances",ff,fe,bc,a6)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String MagLev_obj_sMemberFields[] = {
	HX_("_methods",f3,67,f5,5f),
	HX_("_listeners",40,e1,30,4f),
	HX_("register",63,a6,9f,d0),
	HX_("call",9e,18,ba,41),
	HX_("listen",47,c8,f9,ef),
	HX_("emit",53,9e,15,43),
	::String(null()) };

static void MagLev_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MagLev_obj::_instances,"_instances");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MagLev_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MagLev_obj::_instances,"_instances");
};

#endif

::hx::Class MagLev_obj::__mClass;

static ::String MagLev_obj_sStaticFields[] = {
	HX_("_instances",ff,fe,bc,a6),
	HX_("getInstance",4b,e2,d4,7f),
	::String(null())
};

void MagLev_obj::__register()
{
	MagLev_obj _hx_dummy;
	MagLev_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("maglev.MagLev",ee,1b,68,8c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MagLev_obj::__GetStatic;
	__mClass->mSetStaticField = &MagLev_obj::__SetStatic;
	__mClass->mMarkFunc = MagLev_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(MagLev_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MagLev_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MagLev_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MagLev_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MagLev_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MagLev_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void MagLev_obj::__boot()
{
{
            	HX_GC_STACKFRAME(&_hx_pos_74be3df12ab3af58_52_boot)
HXDLIN(  52)		_instances =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
            	}
}

} // end namespace maglev
