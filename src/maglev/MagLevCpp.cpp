// Generated by Haxe 4.1.1
#include <hxcpp.h>

#ifndef INCLUDED_f1f713c9e000f5d3
#define INCLUDED_f1f713c9e000f5d3
#include "array"
#endif
#ifndef INCLUDED_7625ac700f09f214
#define INCLUDED_7625ac700f09f214
#include "functional"
#endif
#ifndef INCLUDED_31a7389c9269a947
#define INCLUDED_31a7389c9269a947
#include "hx/StdString.h"
#endif
#ifndef INCLUDED_maglev_CppAny
#include <maglev/maglev/CppAny.h>
#endif
#ifndef INCLUDED_maglev_MagLev
#include <maglev/maglev/MagLev.h>
#endif
#ifndef INCLUDED_maglev_MagLevCpp
#include <maglev/maglev/MagLevCpp.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_463dba869de52960_22_new,"maglev.MagLevCpp","new",0x153a7547,"maglev.MagLevCpp.new","maglev/MagLevCpp.hx",22,0x0d988d8a)
HX_LOCAL_STACK_FRAME(_hx_pos_463dba869de52960_36_register,"maglev.MagLevCpp","register",0x1d96dc1c,"maglev.MagLevCpp.register","maglev/MagLevCpp.hx",36,0x0d988d8a)
HX_LOCAL_STACK_FRAME(_hx_pos_463dba869de52960_34_register,"maglev.MagLevCpp","register",0x1d96dc1c,"maglev.MagLevCpp.register","maglev/MagLevCpp.hx",34,0x0d988d8a)
HX_LOCAL_STACK_FRAME(_hx_pos_463dba869de52960_46_call,"maglev.MagLevCpp","call",0x76a3bdd7,"maglev.MagLevCpp.call","maglev/MagLevCpp.hx",46,0x0d988d8a)
HX_LOCAL_STACK_FRAME(_hx_pos_463dba869de52960_57_listen,"maglev.MagLevCpp","listen",0x6e81edc0,"maglev.MagLevCpp.listen","maglev/MagLevCpp.hx",57,0x0d988d8a)
HX_LOCAL_STACK_FRAME(_hx_pos_463dba869de52960_55_listen,"maglev.MagLevCpp","listen",0x6e81edc0,"maglev.MagLevCpp.listen","maglev/MagLevCpp.hx",55,0x0d988d8a)
HX_LOCAL_STACK_FRAME(_hx_pos_463dba869de52960_65_emit,"maglev.MagLevCpp","emit",0x77ff438c,"maglev.MagLevCpp.emit","maglev/MagLevCpp.hx",65,0x0d988d8a)
HX_LOCAL_STACK_FRAME(_hx_pos_463dba869de52960_73_CppAnyToAny,"maglev.MagLevCpp","CppAnyToAny",0xfad89daf,"maglev.MagLevCpp.CppAnyToAny","maglev/MagLevCpp.hx",73,0x0d988d8a)
HX_LOCAL_STACK_FRAME(_hx_pos_463dba869de52960_77_CppAnyVectorToAnyArray,"maglev.MagLevCpp","CppAnyVectorToAnyArray",0x34f3698d,"maglev.MagLevCpp.CppAnyVectorToAnyArray","maglev/MagLevCpp.hx",77,0x0d988d8a)
HX_LOCAL_STACK_FRAME(_hx_pos_463dba869de52960_91_AnyToCppAny,"maglev.MagLevCpp","AnyToCppAny",0xd3f37037,"maglev.MagLevCpp.AnyToCppAny","maglev/MagLevCpp.hx",91,0x0d988d8a)
HX_LOCAL_STACK_FRAME(_hx_pos_463dba869de52960_101_AnyArrayToCppAnyVector,"maglev.MagLevCpp","AnyArrayToCppAnyVector",0x60b010cd,"maglev.MagLevCpp.AnyArrayToCppAnyVector","maglev/MagLevCpp.hx",101,0x0d988d8a)
HX_LOCAL_STACK_FRAME(_hx_pos_463dba869de52960_26_getInstance,"maglev.MagLevCpp","getInstance",0xe9d54632,"maglev.MagLevCpp.getInstance","maglev/MagLevCpp.hx",26,0x0d988d8a)
namespace maglev{

void MagLevCpp_obj::__construct( ::maglev::MagLev maglev){
            	HX_STACKFRAME(&_hx_pos_463dba869de52960_22_new)
HXDLIN(  22)		this->maglev = maglev;
            	}

Dynamic MagLevCpp_obj::__CreateEmpty() { return new MagLevCpp_obj; }

void *MagLevCpp_obj::_hx_vtable = 0;

Dynamic MagLevCpp_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MagLevCpp_obj > _hx_result = new MagLevCpp_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool MagLevCpp_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7fdd21fb;
}

void MagLevCpp_obj::_hx_register( hx::StdString cppMethod, std::function<CppAny(std::vector<CppAny>)> cppCallback){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::maglev::MagLevCpp,_gthis, std::function<CppAny(std::vector<CppAny>)>,cppCallback) HXARGC(1)
            		 ::Dynamic _hx_run(::cpp::VirtualArray haxeArgs){
            			HX_STACKFRAME(&_hx_pos_463dba869de52960_36_register)
HXLINE(  37)			 std::vector<CppAny> cppArgs = _gthis->AnyArrayToCppAnyVector(haxeArgs);
HXLINE(  38)			 ::maglev::CppAny cppResult = cppCallback.operator()(cppArgs);
HXLINE(  39)			 ::Dynamic haxeResult = _gthis->CppAnyToAny(cppResult);
HXLINE(  40)			return haxeResult;
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_463dba869de52960_34_register)
HXLINE(  33)		 ::maglev::MagLevCpp _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  35)		::String haxeMethod = cppMethod.toString();
HXLINE(  36)		 ::Dynamic haxeCallback =  ::Dynamic(new _hx_Closure_0(_gthis,cppCallback));
HXLINE(  42)		this->maglev->_hx_register(haxeMethod,haxeCallback);
            	}


 ::maglev::CppAny MagLevCpp_obj::call( hx::StdString cppMethod, std::vector<CppAny> cppArgs){
            	HX_STACKFRAME(&_hx_pos_463dba869de52960_46_call)
HXLINE(  47)		::String haxeMethod = cppMethod.toString();
HXLINE(  48)		::cpp::VirtualArray haxeArgs = this->CppAnyVectorToAnyArray(cppArgs);
HXLINE(  49)		 ::Dynamic haxeResult = this->maglev->call(haxeMethod,haxeArgs);
HXLINE(  50)		 ::maglev::CppAny cppResult = this->AnyToCppAny(haxeResult);
HXLINE(  51)		return cppResult;
            	}


void MagLevCpp_obj::listen( hx::StdString cppEvent, std::function<CppAny(std::vector<CppAny>)> cppCallback){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::maglev::MagLevCpp,_gthis, std::function<CppAny(std::vector<CppAny>)>,cppCallback) HXARGC(2)
            		void _hx_run(::String haxeEvent,::cpp::VirtualArray haxeArgs){
            			HX_STACKFRAME(&_hx_pos_463dba869de52960_57_listen)
HXLINE(  58)			 std::vector<CppAny> cppArgs = _gthis->AnyArrayToCppAnyVector(haxeArgs);
HXLINE(  59)			cppCallback.operator()(cppArgs);
            		}
            		HX_END_LOCAL_FUNC2((void))

            	HX_STACKFRAME(&_hx_pos_463dba869de52960_55_listen)
HXLINE(  54)		 ::maglev::MagLevCpp _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  56)		::String haxeEvent = cppEvent.toString();
HXLINE(  57)		 ::Dynamic haxeCallback =  ::Dynamic(new _hx_Closure_0(_gthis,cppCallback));
HXLINE(  61)		this->maglev->listen(haxeEvent,haxeCallback);
            	}


void MagLevCpp_obj::emit( hx::StdString cppEvent, std::vector<CppAny> cppArgs){
            	HX_STACKFRAME(&_hx_pos_463dba869de52960_65_emit)
HXLINE(  66)		::String haxeEvent = cppEvent.toString();
HXLINE(  67)		::cpp::VirtualArray haxeArgs = this->CppAnyVectorToAnyArray(cppArgs);
HXLINE(  68)		this->maglev->emit(haxeEvent,haxeArgs);
            	}


 ::Dynamic MagLevCpp_obj::CppAnyToAny( ::maglev::CppAny cppAny){
            	HX_STACKFRAME(&_hx_pos_463dba869de52960_73_CppAnyToAny)
HXDLIN(  73)		return cppAny->getData();
            	}


HX_DEFINE_DYNAMIC_FUNC1(MagLevCpp_obj,CppAnyToAny,return )

::cpp::VirtualArray MagLevCpp_obj::CppAnyVectorToAnyArray( std::vector<CppAny> cppAnyVector){
            	HX_STACKFRAME(&_hx_pos_463dba869de52960_77_CppAnyVectorToAnyArray)
HXLINE(  79)		::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new();
HXLINE(  80)		int i = 0;
HXLINE(  81)		while((i < cppAnyVector.size())){
HXLINE(  82)			 ::maglev::CppAny x = cppAnyVector.at(i);
HXLINE(  83)			arr->push(x->getData());
HXLINE(  84)			i = (i + 1);
            		}
HXLINE(  87)		return arr;
            	}


 ::maglev::CppAny MagLevCpp_obj::AnyToCppAny( ::Dynamic any){
            	HX_GC_STACKFRAME(&_hx_pos_463dba869de52960_91_AnyToCppAny)
HXLINE(  93)		 ::maglev::CppAny cppAny =  ::maglev::CppAny_obj::__alloc( HX_CTX );
HXLINE(  94)		cppAny->setData(any);
HXLINE(  97)		return cppAny;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MagLevCpp_obj,AnyToCppAny,return )

 std::vector<CppAny> MagLevCpp_obj::AnyArrayToCppAnyVector(::cpp::VirtualArray anyArray){
            	HX_GC_STACKFRAME(&_hx_pos_463dba869de52960_101_AnyArrayToCppAnyVector)
HXLINE( 103)		 std::vector<CppAny> vec = std::vector<CppAny>();
HXLINE( 104)		{
HXLINE( 104)			int _g = 0;
HXDLIN( 104)			while((_g < anyArray->get_length())){
HXLINE( 104)				 ::Dynamic any = anyArray->__get(_g);
HXDLIN( 104)				_g = (_g + 1);
HXLINE( 105)				 ::maglev::CppAny cppAny =  ::maglev::CppAny_obj::__alloc( HX_CTX );
HXLINE( 106)				cppAny->setData(any);
HXLINE( 107)				vec.push_back(cppAny);
            			}
            		}
HXLINE( 110)		return vec;
            	}


 ::maglev::MagLevCpp MagLevCpp_obj::getInstance( hx::StdString cppKey){
            	HX_GC_STACKFRAME(&_hx_pos_463dba869de52960_26_getInstance)
HXLINE(  27)		::String key = cppKey.toString();
HXLINE(  28)		 ::maglev::MagLevCpp instance =  ::maglev::MagLevCpp_obj::__alloc( HX_CTX ,::maglev::MagLev_obj::getInstance(key));
HXLINE(  29)		return instance;
            	}



::hx::ObjectPtr< MagLevCpp_obj > MagLevCpp_obj::__new( ::maglev::MagLev maglev) {
	::hx::ObjectPtr< MagLevCpp_obj > __this = new MagLevCpp_obj();
	__this->__construct(maglev);
	return __this;
}

::hx::ObjectPtr< MagLevCpp_obj > MagLevCpp_obj::__alloc(::hx::Ctx *_hx_ctx, ::maglev::MagLev maglev) {
	MagLevCpp_obj *__this = (MagLevCpp_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MagLevCpp_obj), true, "maglev.MagLevCpp"));
	*(void **)__this = MagLevCpp_obj::_hx_vtable;
	__this->__construct(maglev);
	return __this;
}

MagLevCpp_obj::MagLevCpp_obj()
{
}

void MagLevCpp_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MagLevCpp);
	HX_MARK_MEMBER_NAME(maglev,"maglev");
	HX_MARK_END_CLASS();
}

void MagLevCpp_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(maglev,"maglev");
}

::hx::Val MagLevCpp_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"maglev") ) { return ::hx::Val( maglev ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"CppAnyToAny") ) { return ::hx::Val( CppAnyToAny_dyn() ); }
		if (HX_FIELD_EQ(inName,"AnyToCppAny") ) { return ::hx::Val( AnyToCppAny_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val MagLevCpp_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"maglev") ) { maglev=inValue.Cast<  ::maglev::MagLev >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MagLevCpp_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("maglev",2a,df,2b,b3));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MagLevCpp_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::maglev::MagLev */ ,(int)offsetof(MagLevCpp_obj,maglev),HX_("maglev",2a,df,2b,b3)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *MagLevCpp_obj_sStaticStorageInfo = 0;
#endif

static ::String MagLevCpp_obj_sMemberFields[] = {
	HX_("maglev",2a,df,2b,b3),
	HX_("CppAnyToAny",c8,39,d8,90),
	HX_("AnyToCppAny",50,0c,f3,69),
	::String(null()) };

::hx::Class MagLevCpp_obj::__mClass;

void MagLevCpp_obj::__register()
{
	MagLevCpp_obj _hx_dummy;
	MagLevCpp_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("maglev.MagLevCpp",d5,c5,de,9a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MagLevCpp_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MagLevCpp_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MagLevCpp_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MagLevCpp_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace maglev
