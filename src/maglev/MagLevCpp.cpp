// Generated by Haxe 4.1.1
#include <hxcpp.h>

#ifndef INCLUDED_f1f713c9e000f5d3
#define INCLUDED_f1f713c9e000f5d3
#include "array"
#endif
#ifndef INCLUDED_7625ac700f09f214
#define INCLUDED_7625ac700f09f214
#include "functional"
#endif
#ifndef INCLUDED_31a7389c9269a947
#define INCLUDED_31a7389c9269a947
#include "hx/StdString.h"
#endif
#ifndef INCLUDED_Reflect
#include <Reflect.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_maglev_CppAny
#include <maglev/CppAny.h>
#endif
#ifndef INCLUDED_maglev_MagLev
#include <maglev/MagLev.h>
#endif
#ifndef INCLUDED_maglev_MagLevAny
#include <maglev/MagLevAny.h>
#endif
#ifndef INCLUDED_maglev_MagLevArray
#include <maglev/MagLevArray.h>
#endif
#ifndef INCLUDED_maglev_MagLevBoolean
#include <maglev/MagLevBoolean.h>
#endif
#ifndef INCLUDED_maglev_MagLevCpp
#include <maglev/MagLevCpp.h>
#endif
#ifndef INCLUDED_maglev_MagLevError
#include <maglev/MagLevError.h>
#endif
#ifndef INCLUDED_maglev_MagLevFunction
#include <maglev/MagLevFunction.h>
#endif
#ifndef INCLUDED_maglev_MagLevNull
#include <maglev/MagLevNull.h>
#endif
#ifndef INCLUDED_maglev_MagLevNumber
#include <maglev/MagLevNumber.h>
#endif
#ifndef INCLUDED_maglev_MagLevObject
#include <maglev/MagLevObject.h>
#endif
#ifndef INCLUDED_maglev_MagLevResult
#include <maglev/MagLevResult.h>
#endif
#ifndef INCLUDED_maglev_MagLevString
#include <maglev/MagLevString.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_463dba869de52960_27_new,"maglev.MagLevCpp","new",0x153a7547,"maglev.MagLevCpp.new","maglev/MagLevCpp.hx",27,0x0d988d8a)
HX_LOCAL_STACK_FRAME(_hx_pos_463dba869de52960_41_register,"maglev.MagLevCpp","register",0x1d96dc1c,"maglev.MagLevCpp.register","maglev/MagLevCpp.hx",41,0x0d988d8a)
HX_LOCAL_STACK_FRAME(_hx_pos_463dba869de52960_39_register,"maglev.MagLevCpp","register",0x1d96dc1c,"maglev.MagLevCpp.register","maglev/MagLevCpp.hx",39,0x0d988d8a)
HX_LOCAL_STACK_FRAME(_hx_pos_463dba869de52960_54_call,"maglev.MagLevCpp","call",0x76a3bdd7,"maglev.MagLevCpp.call","maglev/MagLevCpp.hx",54,0x0d988d8a)
HX_LOCAL_STACK_FRAME(_hx_pos_463dba869de52960_51_call,"maglev.MagLevCpp","call",0x76a3bdd7,"maglev.MagLevCpp.call","maglev/MagLevCpp.hx",51,0x0d988d8a)
HX_LOCAL_STACK_FRAME(_hx_pos_463dba869de52960_63_listen,"maglev.MagLevCpp","listen",0x6e81edc0,"maglev.MagLevCpp.listen","maglev/MagLevCpp.hx",63,0x0d988d8a)
HX_LOCAL_STACK_FRAME(_hx_pos_463dba869de52960_61_listen,"maglev.MagLevCpp","listen",0x6e81edc0,"maglev.MagLevCpp.listen","maglev/MagLevCpp.hx",61,0x0d988d8a)
HX_LOCAL_STACK_FRAME(_hx_pos_463dba869de52960_71_emit,"maglev.MagLevCpp","emit",0x77ff438c,"maglev.MagLevCpp.emit","maglev/MagLevCpp.hx",71,0x0d988d8a)
HX_LOCAL_STACK_FRAME(_hx_pos_463dba869de52960_79_CppAnyToAny,"maglev.MagLevCpp","CppAnyToAny",0xfad89daf,"maglev.MagLevCpp.CppAnyToAny","maglev/MagLevCpp.hx",79,0x0d988d8a)
HX_LOCAL_STACK_FRAME(_hx_pos_463dba869de52960_83_CppAnyVectorToAnyArray,"maglev.MagLevCpp","CppAnyVectorToAnyArray",0x34f3698d,"maglev.MagLevCpp.CppAnyVectorToAnyArray","maglev/MagLevCpp.hx",83,0x0d988d8a)
HX_LOCAL_STACK_FRAME(_hx_pos_463dba869de52960_97_AnyToCppAny,"maglev.MagLevCpp","AnyToCppAny",0xd3f37037,"maglev.MagLevCpp.AnyToCppAny","maglev/MagLevCpp.hx",97,0x0d988d8a)
HX_LOCAL_STACK_FRAME(_hx_pos_463dba869de52960_107_AnyArrayToCppAnyVector,"maglev.MagLevCpp","AnyArrayToCppAnyVector",0x60b010cd,"maglev.MagLevCpp.AnyArrayToCppAnyVector","maglev/MagLevCpp.hx",107,0x0d988d8a)
HX_LOCAL_STACK_FRAME(_hx_pos_463dba869de52960_124_old_register,"maglev.MagLevCpp","old_register",0x6b793e74,"maglev.MagLevCpp.old_register","maglev/MagLevCpp.hx",124,0x0d988d8a)
HX_LOCAL_STACK_FRAME(_hx_pos_463dba869de52960_123_old_register,"maglev.MagLevCpp","old_register",0x6b793e74,"maglev.MagLevCpp.old_register","maglev/MagLevCpp.hx",123,0x0d988d8a)
HX_LOCAL_STACK_FRAME(_hx_pos_463dba869de52960_144_old_call,"maglev.MagLevCpp","old_call",0x9560142f,"maglev.MagLevCpp.old_call","maglev/MagLevCpp.hx",144,0x0d988d8a)
HX_LOCAL_STACK_FRAME(_hx_pos_463dba869de52960_148_old_call,"maglev.MagLevCpp","old_call",0x9560142f,"maglev.MagLevCpp.old_call","maglev/MagLevCpp.hx",148,0x0d988d8a)
HX_LOCAL_STACK_FRAME(_hx_pos_463dba869de52960_138_old_call,"maglev.MagLevCpp","old_call",0x9560142f,"maglev.MagLevCpp.old_call","maglev/MagLevCpp.hx",138,0x0d988d8a)
HX_LOCAL_STACK_FRAME(_hx_pos_463dba869de52960_156_old_listen,"maglev.MagLevCpp","old_listen",0xf5c28a18,"maglev.MagLevCpp.old_listen","maglev/MagLevCpp.hx",156,0x0d988d8a)
HX_LOCAL_STACK_FRAME(_hx_pos_463dba869de52960_154_old_listen,"maglev.MagLevCpp","old_listen",0xf5c28a18,"maglev.MagLevCpp.old_listen","maglev/MagLevCpp.hx",154,0x0d988d8a)
HX_LOCAL_STACK_FRAME(_hx_pos_463dba869de52960_170_old_emit,"maglev.MagLevCpp","old_emit",0x96bb99e4,"maglev.MagLevCpp.old_emit","maglev/MagLevCpp.hx",170,0x0d988d8a)
HX_LOCAL_STACK_FRAME(_hx_pos_463dba869de52960_179_old_convertToHaxe,"maglev.MagLevCpp","old_convertToHaxe",0x338c13e3,"maglev.MagLevCpp.old_convertToHaxe","maglev/MagLevCpp.hx",179,0x0d988d8a)
HX_LOCAL_STACK_FRAME(_hx_pos_463dba869de52960_222_old_convertToMagLev,"maglev.MagLevCpp","old_convertToMagLev",0x321ca007,"maglev.MagLevCpp.old_convertToMagLev","maglev/MagLevCpp.hx",222,0x0d988d8a)
HX_LOCAL_STACK_FRAME(_hx_pos_463dba869de52960_239_old_convertToMagLev,"maglev.MagLevCpp","old_convertToMagLev",0x321ca007,"maglev.MagLevCpp.old_convertToMagLev","maglev/MagLevCpp.hx",239,0x0d988d8a)
HX_LOCAL_STACK_FRAME(_hx_pos_463dba869de52960_31_getInstance,"maglev.MagLevCpp","getInstance",0xe9d54632,"maglev.MagLevCpp.getInstance","maglev/MagLevCpp.hx",31,0x0d988d8a)
HX_LOCAL_STACK_FRAME(_hx_pos_463dba869de52960_120_throwString,"maglev.MagLevCpp","throwString",0x43a8be7e,"maglev.MagLevCpp.throwString","maglev/MagLevCpp.hx",120,0x0d988d8a)
#include <stdexcept>
namespace maglev{

void MagLevCpp_obj::__construct( ::maglev::MagLev maglev){
            	HX_STACKFRAME(&_hx_pos_463dba869de52960_27_new)
HXDLIN(  27)		this->maglev = maglev;
            	}

Dynamic MagLevCpp_obj::__CreateEmpty() { return new MagLevCpp_obj; }

void *MagLevCpp_obj::_hx_vtable = 0;

Dynamic MagLevCpp_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MagLevCpp_obj > _hx_result = new MagLevCpp_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool MagLevCpp_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7fdd21fb;
}

void MagLevCpp_obj::_hx_register( hx::StdString cppMethod, std::function<CppAny(std::vector<CppAny>)> cppCallback){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::maglev::MagLevCpp,_gthis, std::function<CppAny(std::vector<CppAny>)>,cppCallback) HXARGC(1)
            		 ::Dynamic _hx_run(::cpp::VirtualArray haxeArgs){
            			HX_STACKFRAME(&_hx_pos_463dba869de52960_41_register)
HXLINE(  42)			 std::vector<CppAny> cppArgs = _gthis->AnyArrayToCppAnyVector(haxeArgs);
HXLINE(  43)			 ::maglev::CppAny cppResult = cppCallback.operator()(cppArgs);
HXLINE(  44)			 ::Dynamic haxeResult = _gthis->CppAnyToAny(cppResult);
HXLINE(  45)			return haxeResult;
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_463dba869de52960_39_register)
HXLINE(  38)		 ::maglev::MagLevCpp _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  40)		::String haxeMethod = cppMethod.toString();
HXLINE(  41)		 ::Dynamic haxeCallback =  ::Dynamic(new _hx_Closure_0(_gthis,cppCallback));
HXLINE(  47)		this->old_register(haxeMethod,haxeCallback);
            	}


void MagLevCpp_obj::call( hx::StdString cppMethod, std::vector<CppAny> cppArgs, std::function<void(CppAny)> cppResultCallback){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, std::function<void(CppAny)>,cppResultCallback, ::maglev::MagLevCpp,_gthis) HXARGC(1)
            		void _hx_run( ::Dynamic haxeResult){
            			HX_STACKFRAME(&_hx_pos_463dba869de52960_54_call)
HXLINE(  55)			 ::maglev::CppAny cppResult = _gthis->AnyToCppAny(haxeResult);
HXLINE(  56)			cppResultCallback.operator()(cppResult);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_463dba869de52960_51_call)
HXLINE(  50)		 ::maglev::MagLevCpp _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  52)		::String haxeMethod = cppMethod.toString();
HXLINE(  53)		::cpp::VirtualArray haxeArgs = this->CppAnyVectorToAnyArray(cppArgs);
HXLINE(  54)		this->old_call(haxeMethod,haxeArgs, ::Dynamic(new _hx_Closure_0(cppResultCallback,_gthis)));
            	}


void MagLevCpp_obj::listen( hx::StdString cppEvent, std::function<CppAny(std::vector<CppAny>)> cppCallback){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::maglev::MagLevCpp,_gthis, std::function<CppAny(std::vector<CppAny>)>,cppCallback) HXARGC(2)
            		void _hx_run(::String haxeEvent,::cpp::VirtualArray haxeArgs){
            			HX_STACKFRAME(&_hx_pos_463dba869de52960_63_listen)
HXLINE(  64)			 std::vector<CppAny> cppArgs = _gthis->AnyArrayToCppAnyVector(haxeArgs);
HXLINE(  65)			cppCallback.operator()(cppArgs);
            		}
            		HX_END_LOCAL_FUNC2((void))

            	HX_STACKFRAME(&_hx_pos_463dba869de52960_61_listen)
HXLINE(  60)		 ::maglev::MagLevCpp _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  62)		::String haxeEvent = cppEvent.toString();
HXLINE(  63)		 ::Dynamic haxeCallback =  ::Dynamic(new _hx_Closure_0(_gthis,cppCallback));
HXLINE(  67)		this->old_listen(haxeEvent,haxeCallback);
            	}


void MagLevCpp_obj::emit( hx::StdString cppEvent, std::vector<CppAny> cppArgs){
            	HX_STACKFRAME(&_hx_pos_463dba869de52960_71_emit)
HXLINE(  72)		::String haxeEvent = cppEvent.toString();
HXLINE(  73)		::cpp::VirtualArray haxeArgs = this->CppAnyVectorToAnyArray(cppArgs);
HXLINE(  74)		this->old_emit(haxeEvent,haxeArgs);
            	}


 ::Dynamic MagLevCpp_obj::CppAnyToAny( ::maglev::CppAny cppAny){
            	HX_STACKFRAME(&_hx_pos_463dba869de52960_79_CppAnyToAny)
HXDLIN(  79)		return cppAny->getData();
            	}


HX_DEFINE_DYNAMIC_FUNC1(MagLevCpp_obj,CppAnyToAny,return )

::cpp::VirtualArray MagLevCpp_obj::CppAnyVectorToAnyArray( std::vector<CppAny> cppAnyVector){
            	HX_STACKFRAME(&_hx_pos_463dba869de52960_83_CppAnyVectorToAnyArray)
HXLINE(  85)		::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new();
HXLINE(  86)		int i = 0;
HXLINE(  87)		while((i < cppAnyVector.size())){
HXLINE(  88)			 ::maglev::CppAny x = cppAnyVector.at(i);
HXLINE(  89)			arr->push(x->getData());
HXLINE(  90)			i = (i + 1);
            		}
HXLINE(  93)		return arr;
            	}


 ::maglev::CppAny MagLevCpp_obj::AnyToCppAny( ::Dynamic any){
            	HX_GC_STACKFRAME(&_hx_pos_463dba869de52960_97_AnyToCppAny)
HXLINE(  99)		 ::maglev::CppAny cppAny =  ::maglev::CppAny_obj::__alloc( HX_CTX );
HXLINE( 100)		cppAny->setData(any);
HXLINE( 103)		return cppAny;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MagLevCpp_obj,AnyToCppAny,return )

 std::vector<CppAny> MagLevCpp_obj::AnyArrayToCppAnyVector(::cpp::VirtualArray anyArray){
            	HX_GC_STACKFRAME(&_hx_pos_463dba869de52960_107_AnyArrayToCppAnyVector)
HXLINE( 109)		 std::vector<CppAny> vec = std::vector<CppAny>();
HXLINE( 110)		{
HXLINE( 110)			int _g = 0;
HXDLIN( 110)			while((_g < anyArray->get_length())){
HXLINE( 110)				 ::Dynamic any = anyArray->__get(_g);
HXDLIN( 110)				_g = (_g + 1);
HXLINE( 111)				 ::maglev::CppAny cppAny =  ::maglev::CppAny_obj::__alloc( HX_CTX );
HXLINE( 112)				cppAny->setData(any);
HXLINE( 113)				vec.push_back(cppAny);
            			}
            		}
HXLINE( 116)		return vec;
            	}


void MagLevCpp_obj::old_register(::String method, ::Dynamic callback){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::maglev::MagLevCpp,_gthis, ::Dynamic,callback) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_STACKFRAME(&_hx_pos_463dba869de52960_124_old_register)
HXLINE( 125)			::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new();
HXLINE( 126)			int i = 0;
HXLINE( 127)			while((i < args->size())){
HXLINE( 128)				 ::maglev::MagLevCpp _gthis1 = _gthis;
HXDLIN( 128)				arr->push(_gthis1->old_convertToHaxe(args->get(i)));
HXLINE( 129)				i = (i + 1);
            			}
HXLINE( 131)			 ::maglev::MagLevCpp _gthis1 = _gthis;
HXDLIN( 131)			 ::maglev::MagLevAny result = _gthis1->old_convertToMagLev(callback(arr));
HXLINE( 132)			return ::maglev::MagLevResult_obj::fromResult(result);
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_GC_STACKFRAME(&_hx_pos_463dba869de52960_123_old_register)
HXDLIN( 123)		 ::maglev::MagLevCpp _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 124)		 ::Dynamic myfunc =  ::Dynamic(new _hx_Closure_0(_gthis,callback));
HXLINE( 134)		 ::maglev::MagLevFunction mycallback =  ::maglev::MagLevFunction_obj::__alloc( HX_CTX ,myfunc,null());
HXLINE( 135)		this->maglev->_hx_register(method,mycallback);
            	}


HX_DEFINE_DYNAMIC_FUNC2(MagLevCpp_obj,old_register,(void))

void MagLevCpp_obj::old_call(::String method,::cpp::VirtualArray args, ::Dynamic callback){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevError error){
            			HX_GC_STACKFRAME(&_hx_pos_463dba869de52960_144_old_call)
HXLINE( 145)			::maglev::MagLevCpp_obj::throwString(::hx::StdString(error->getMessage()));
HXLINE( 146)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(null()));
HXDLIN( 146)			return null();
            		}
            		HX_END_LOCAL_FUNC1(return)

            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::maglev::MagLevCpp,_gthis, ::Dynamic,callback) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevAny result){
            			HX_GC_STACKFRAME(&_hx_pos_463dba869de52960_148_old_call)
HXLINE( 149)			 ::Dynamic callback1 = callback;
HXDLIN( 149)			callback1(_gthis->old_convertToHaxe(result));
HXLINE( 150)			return ::maglev::MagLevResult_obj::fromResult(::maglev::MagLevNull_obj::create());
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_GC_STACKFRAME(&_hx_pos_463dba869de52960_138_old_call)
HXDLIN( 138)		 ::maglev::MagLevCpp _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 139)		 ::maglev::MagLevArray myargs =  ::maglev::MagLevArray_obj::__alloc( HX_CTX );
HXLINE( 140)		{
HXLINE( 140)			int _g = 0;
HXDLIN( 140)			while((_g < args->get_length())){
HXLINE( 140)				 ::Dynamic arg = args->__get(_g);
HXDLIN( 140)				_g = (_g + 1);
HXLINE( 141)				myargs->push(this->old_convertToMagLev(arg));
            			}
            		}
HXLINE( 143)		 ::maglev::MagLevResult myresult = this->maglev->call(method,myargs);
HXLINE( 144)		myresult->onError( ::Dynamic(new _hx_Closure_0()));
HXLINE( 148)		myresult->onResult( ::Dynamic(new _hx_Closure_1(_gthis,callback)));
            	}


HX_DEFINE_DYNAMIC_FUNC3(MagLevCpp_obj,old_call,(void))

void MagLevCpp_obj::old_listen(::String event, ::Dynamic callback){
            		HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_0, ::maglev::MagLevCpp,_gthis,::String,event, ::Dynamic,callback) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            			HX_STACKFRAME(&_hx_pos_463dba869de52960_156_old_listen)
HXLINE( 157)			::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new();
HXLINE( 158)			int i = 0;
HXLINE( 159)			while((i < args->size())){
HXLINE( 160)				 ::maglev::MagLevCpp _gthis1 = _gthis;
HXDLIN( 160)				arr->push(_gthis1->old_convertToHaxe(args->get(i)));
HXLINE( 161)				i = (i + 1);
            			}
HXLINE( 163)			callback(event,arr);
HXLINE( 164)			return null();
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_GC_STACKFRAME(&_hx_pos_463dba869de52960_154_old_listen)
HXDLIN( 154)		 ::maglev::MagLevCpp _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 156)		 ::Dynamic mysub =  ::Dynamic(new _hx_Closure_0(_gthis,event,callback));
HXLINE( 166)		 ::maglev::MagLevFunction mycallback =  ::maglev::MagLevFunction_obj::__alloc( HX_CTX ,mysub,null());
HXLINE( 167)		this->maglev->listen(event,mycallback);
            	}


HX_DEFINE_DYNAMIC_FUNC2(MagLevCpp_obj,old_listen,(void))

void MagLevCpp_obj::old_emit(::String event,::cpp::VirtualArray args){
            	HX_GC_STACKFRAME(&_hx_pos_463dba869de52960_170_old_emit)
HXLINE( 171)		 ::maglev::MagLevArray myargs =  ::maglev::MagLevArray_obj::__alloc( HX_CTX );
HXLINE( 172)		{
HXLINE( 172)			int _g = 0;
HXDLIN( 172)			while((_g < args->get_length())){
HXLINE( 172)				 ::Dynamic arg = args->__get(_g);
HXDLIN( 172)				_g = (_g + 1);
HXLINE( 173)				myargs->push(this->old_convertToMagLev(arg));
            			}
            		}
HXLINE( 175)		this->maglev->emit(event,myargs);
            	}


HX_DEFINE_DYNAMIC_FUNC2(MagLevCpp_obj,old_emit,(void))

 ::Dynamic MagLevCpp_obj::old_convertToHaxe( ::maglev::MagLevAny x){
            	HX_GC_STACKFRAME(&_hx_pos_463dba869de52960_179_old_convertToHaxe)
HXDLIN( 179)		int _hx_tmp = x->getType();
HXDLIN( 179)		if ((_hx_tmp == ::maglev::MagLevNull_obj::getStaticType())) {
HXLINE( 180)			return null();
            		}
            		else {
HXLINE( 182)			int _hx_tmp = x->getType();
HXDLIN( 182)			if ((_hx_tmp == ::maglev::MagLevBoolean_obj::getStaticType())) {
HXLINE( 183)				 ::maglev::MagLevBoolean y = ::hx::TCast<  ::maglev::MagLevBoolean >::cast(x);
HXLINE( 184)				return y->getBool();
            			}
            			else {
HXLINE( 186)				int _hx_tmp = x->getType();
HXDLIN( 186)				if ((_hx_tmp == ::maglev::MagLevString_obj::getStaticType())) {
HXLINE( 187)					 ::maglev::MagLevString y = ::hx::TCast<  ::maglev::MagLevString >::cast(x);
HXLINE( 188)					return y->getString();
            				}
            				else {
HXLINE( 190)					int _hx_tmp = x->getType();
HXDLIN( 190)					if ((_hx_tmp == ::maglev::MagLevNumber_obj::getStaticType())) {
HXLINE( 191)						 ::maglev::MagLevNumber y = ::hx::TCast<  ::maglev::MagLevNumber >::cast(x);
HXLINE( 192)						return y->getFloat();
            					}
            					else {
HXLINE( 194)						int _hx_tmp = x->getType();
HXDLIN( 194)						if ((_hx_tmp == ::maglev::MagLevArray_obj::getStaticType())) {
HXLINE( 195)							 ::maglev::MagLevArray y = ::hx::TCast<  ::maglev::MagLevArray >::cast(x);
HXLINE( 196)							::cpp::VirtualArray arr = ::cpp::VirtualArray_obj::__new();
HXLINE( 197)							int i = 0;
HXLINE( 198)							while((i < y->size())){
HXLINE( 199)								arr->push(this->old_convertToHaxe(y->get(i)));
HXLINE( 200)								i = (i + 1);
            							}
HXLINE( 202)							return arr;
            						}
            						else {
HXLINE( 204)							int _hx_tmp = x->getType();
HXDLIN( 204)							if ((_hx_tmp == ::maglev::MagLevObject_obj::getStaticType())) {
HXLINE( 205)								 ::maglev::MagLevObject y = ::hx::TCast<  ::maglev::MagLevObject >::cast(x);
HXLINE( 206)								 ::haxe::ds::StringMap map =  ::haxe::ds::StringMap_obj::__alloc( HX_CTX );
HXLINE( 207)								 ::maglev::MagLevArray keys = y->keys();
HXLINE( 208)								int i = 0;
HXLINE( 209)								while((i < keys->size())){
HXLINE( 210)									::String key = ::hx::TCast<  ::maglev::MagLevString >::cast(keys->get(i))->getString();
HXLINE( 211)									map->set(key,this->old_convertToHaxe(y->get(key)));
HXLINE( 212)									i = (i + 1);
            								}
HXLINE( 214)								return map;
            							}
            							else {
HXLINE( 217)								::maglev::MagLevCpp_obj::throwString(::hx::StdString(HX_("convertToHaxe: unknown type",4a,83,07,f2)));
HXLINE( 218)								HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(null()));
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 179)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(MagLevCpp_obj,old_convertToHaxe,return )

 ::maglev::MagLevAny MagLevCpp_obj::old_convertToMagLev( ::Dynamic x){
            	HX_STACKFRAME(&_hx_pos_463dba869de52960_222_old_convertToMagLev)
HXDLIN( 222)		 ::maglev::MagLevCpp _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 223)		if (::hx::IsNull( x )) {
HXLINE( 224)			return ::maglev::MagLevNull_obj::create();
            		}
            		else {
HXLINE( 226)			if (::Std_obj::isOfType(x,( ( ::Dynamic)(::hx::ClassOf< bool >()) ))) {
HXLINE( 227)				return ::maglev::MagLevBoolean_obj::fromBool(::hx::TCast< bool >::cast(x));
            			}
            			else {
HXLINE( 229)				if (::Std_obj::isOfType(x,( ( ::Dynamic)(::hx::ClassOf< ::String >()) ))) {
HXLINE( 230)					return ::maglev::MagLevString_obj::fromString(::hx::TCast< ::String >::cast(x));
            				}
            				else {
HXLINE( 232)					if (::Std_obj::isOfType(x,( ( ::Dynamic)(::hx::ClassOf< int >()) ))) {
HXLINE( 233)						return ::maglev::MagLevNumber_obj::fromInt(::hx::TCast< int >::cast(x));
            					}
            					else {
HXLINE( 235)						if (::Std_obj::isOfType(x,( ( ::Dynamic)(::hx::ClassOf< ::Float >()) ))) {
HXLINE( 236)							return ::maglev::MagLevNumber_obj::fromFloat(( (Float)(x) ));
            						}
            						else {
HXLINE( 238)							if (::Reflect_obj::isFunction(x)) {
            								HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::maglev::MagLevCpp,_gthis, ::Dynamic,x) HXARGC(1)
            								 ::maglev::MagLevResult _hx_run( ::maglev::MagLevArray args){
            									HX_STACKFRAME(&_hx_pos_463dba869de52960_239_old_convertToMagLev)
HXLINE( 240)									 ::Dynamic y = x;
HXLINE( 241)									 ::Dynamic haxeArgs = _gthis->old_convertToHaxe(args);
HXLINE( 242)									 ::Dynamic haxeRet = y(haxeArgs);
HXLINE( 243)									return ::maglev::MagLevResult_obj::fromResult(_gthis->old_convertToMagLev(haxeRet));
            								}
            								HX_END_LOCAL_FUNC1(return)

HXLINE( 239)								 ::Dynamic f =  ::Dynamic(new _hx_Closure_0(_gthis,x));
HXLINE( 245)								return ::maglev::MagLevFunction_obj::fromFunction(f);
            							}
            							else {
HXLINE( 247)								if (::Std_obj::isOfType(x,( ( ::Dynamic)(::hx::ArrayBase::__mClass) ))) {
HXLINE( 248)									 ::maglev::MagLevArray arr = ::maglev::MagLevArray_obj::create();
HXLINE( 249)									::cpp::VirtualArray y = ( (::cpp::VirtualArray)(x) );
HXLINE( 250)									{
HXLINE( 250)										int _g = 0;
HXDLIN( 250)										while((_g < y->get_length())){
HXLINE( 250)											 ::Dynamic item = y->__get(_g);
HXDLIN( 250)											_g = (_g + 1);
HXLINE( 251)											arr->push(this->old_convertToMagLev(item));
            										}
            									}
HXLINE( 253)									return arr;
            								}
            								else {
HXLINE( 255)									if (::Std_obj::isOfType(x,( ( ::Dynamic)(::hx::ClassOf< ::haxe::ds::StringMap >()) ))) {
HXLINE( 256)										 ::haxe::ds::StringMap map = ( ( ::haxe::ds::StringMap)(x) );
HXLINE( 257)										 ::maglev::MagLevObject obj = ::maglev::MagLevObject_obj::create();
HXLINE( 258)										{
HXLINE( 258)											 ::Dynamic key = map->keys();
HXDLIN( 258)											while(( (bool)(key->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE( 258)												::String key1 = ( (::String)(key->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE( 259)												obj->set(key1,this->old_convertToMagLev(map->get(key1)));
            											}
            										}
HXLINE( 261)										return obj;
            									}
            									else {
HXLINE( 263)										if (::Reflect_obj::isObject(x)) {
HXLINE( 264)											 ::maglev::MagLevObject obj = ::maglev::MagLevObject_obj::create();
HXLINE( 265)											{
HXLINE( 265)												int _g = 0;
HXDLIN( 265)												::Array< ::String > _g1 = ::Reflect_obj::fields(x);
HXDLIN( 265)												while((_g < _g1->length)){
HXLINE( 265)													::String field = _g1->__get(_g);
HXDLIN( 265)													_g = (_g + 1);
HXLINE( 266)													 ::Dynamic val = ::Reflect_obj::getProperty(x,field);
HXLINE( 267)													obj->set(field,this->old_convertToMagLev(val));
            												}
            											}
HXLINE( 269)											return obj;
            										}
            										else {
HXLINE( 272)											::maglev::MagLevCpp_obj::throwString(::hx::StdString(HX_("convertToMagLev: unknown type",ae,84,a9,64)));
HXLINE( 273)											HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(null()));
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 223)		return null();
            	}


HX_DEFINE_DYNAMIC_FUNC1(MagLevCpp_obj,old_convertToMagLev,return )

 ::maglev::MagLevCpp MagLevCpp_obj::getInstance( hx::StdString cppKey){
            	HX_GC_STACKFRAME(&_hx_pos_463dba869de52960_31_getInstance)
HXLINE(  32)		::String key = cppKey.toString();
HXLINE(  33)		 ::maglev::MagLevCpp instance =  ::maglev::MagLevCpp_obj::__alloc( HX_CTX ,::maglev::MagLev_obj::getInstance(key));
HXLINE(  34)		return instance;
            	}


void MagLevCpp_obj::throwString( hx::StdString message){
            	HX_STACKFRAME(&_hx_pos_463dba869de52960_120_throwString)
            	throw std::runtime_error(std::string(message));

            	}



::hx::ObjectPtr< MagLevCpp_obj > MagLevCpp_obj::__new( ::maglev::MagLev maglev) {
	::hx::ObjectPtr< MagLevCpp_obj > __this = new MagLevCpp_obj();
	__this->__construct(maglev);
	return __this;
}

::hx::ObjectPtr< MagLevCpp_obj > MagLevCpp_obj::__alloc(::hx::Ctx *_hx_ctx, ::maglev::MagLev maglev) {
	MagLevCpp_obj *__this = (MagLevCpp_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MagLevCpp_obj), true, "maglev.MagLevCpp"));
	*(void **)__this = MagLevCpp_obj::_hx_vtable;
	__this->__construct(maglev);
	return __this;
}

MagLevCpp_obj::MagLevCpp_obj()
{
}

void MagLevCpp_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MagLevCpp);
	HX_MARK_MEMBER_NAME(maglev,"maglev");
	HX_MARK_END_CLASS();
}

void MagLevCpp_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(maglev,"maglev");
}

::hx::Val MagLevCpp_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"maglev") ) { return ::hx::Val( maglev ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"old_call") ) { return ::hx::Val( old_call_dyn() ); }
		if (HX_FIELD_EQ(inName,"old_emit") ) { return ::hx::Val( old_emit_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"old_listen") ) { return ::hx::Val( old_listen_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"CppAnyToAny") ) { return ::hx::Val( CppAnyToAny_dyn() ); }
		if (HX_FIELD_EQ(inName,"AnyToCppAny") ) { return ::hx::Val( AnyToCppAny_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"old_register") ) { return ::hx::Val( old_register_dyn() ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"old_convertToHaxe") ) { return ::hx::Val( old_convertToHaxe_dyn() ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"old_convertToMagLev") ) { return ::hx::Val( old_convertToMagLev_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val MagLevCpp_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"maglev") ) { maglev=inValue.Cast<  ::maglev::MagLev >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MagLevCpp_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("maglev",2a,df,2b,b3));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MagLevCpp_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::maglev::MagLev */ ,(int)offsetof(MagLevCpp_obj,maglev),HX_("maglev",2a,df,2b,b3)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *MagLevCpp_obj_sStaticStorageInfo = 0;
#endif

static ::String MagLevCpp_obj_sMemberFields[] = {
	HX_("maglev",2a,df,2b,b3),
	HX_("CppAnyToAny",c8,39,d8,90),
	HX_("AnyToCppAny",50,0c,f3,69),
	HX_("old_register",3b,38,22,15),
	HX_("old_call",76,de,68,48),
	HX_("old_listen",1f,b4,47,14),
	HX_("old_emit",2b,64,c4,49),
	HX_("old_convertToHaxe",bc,48,c1,f6),
	HX_("old_convertToMagLev",20,7d,ab,14),
	::String(null()) };

::hx::Class MagLevCpp_obj::__mClass;

void MagLevCpp_obj::__register()
{
	MagLevCpp_obj _hx_dummy;
	MagLevCpp_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("maglev.MagLevCpp",d5,c5,de,9a);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MagLevCpp_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MagLevCpp_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MagLevCpp_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MagLevCpp_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace maglev
