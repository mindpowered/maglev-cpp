// Generated by Haxe 4.1.1
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_maglev_MagLevAny
#include <maglev/MagLevAny.h>
#endif
#ifndef INCLUDED_maglev_MagLevNumber
#include <maglev/MagLevNumber.h>
#endif
#ifndef INCLUDED_maglev_MagLevString
#include <maglev/MagLevString.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d207dc21e1bba0ef_458_new,"maglev.MagLevNumber","new",0xcbac55c9,"maglev.MagLevNumber.new","maglev/MagLev.hx",458,0x5b19476f)
HX_LOCAL_STACK_FRAME(_hx_pos_d207dc21e1bba0ef_463_getFloat,"maglev.MagLevNumber","getFloat",0xea8c131d,"maglev.MagLevNumber.getFloat","maglev/MagLev.hx",463,0x5b19476f)
HX_LOCAL_STACK_FRAME(_hx_pos_d207dc21e1bba0ef_466_getInt,"maglev.MagLevNumber","getInt",0xad8f4830,"maglev.MagLevNumber.getInt","maglev/MagLev.hx",466,0x5b19476f)
HX_LOCAL_STACK_FRAME(_hx_pos_d207dc21e1bba0ef_469_getType,"maglev.MagLevNumber","getType",0x371d9059,"maglev.MagLevNumber.getType","maglev/MagLev.hx",469,0x5b19476f)
HX_LOCAL_STACK_FRAME(_hx_pos_d207dc21e1bba0ef_475_isEqual,"maglev.MagLevNumber","isEqual",0x269a6153,"maglev.MagLevNumber.isEqual","maglev/MagLev.hx",475,0x5b19476f)
HX_LOCAL_STACK_FRAME(_hx_pos_d207dc21e1bba0ef_484_toJson,"maglev.MagLevNumber","toJson",0x8691af7a,"maglev.MagLevNumber.toJson","maglev/MagLev.hx",484,0x5b19476f)
HX_LOCAL_STACK_FRAME(_hx_pos_d207dc21e1bba0ef_453_fromFloat,"maglev.MagLevNumber","fromFloat",0x4977a9fb,"maglev.MagLevNumber.fromFloat","maglev/MagLev.hx",453,0x5b19476f)
HX_LOCAL_STACK_FRAME(_hx_pos_d207dc21e1bba0ef_456_fromInt,"maglev.MagLevNumber","fromInt",0x6f8ccb8e,"maglev.MagLevNumber.fromInt","maglev/MagLev.hx",456,0x5b19476f)
HX_LOCAL_STACK_FRAME(_hx_pos_d207dc21e1bba0ef_472_getStaticType,"maglev.MagLevNumber","getStaticType",0xdd720967,"maglev.MagLevNumber.getStaticType","maglev/MagLev.hx",472,0x5b19476f)
namespace maglev{

void MagLevNumber_obj::__construct(Float value){
            	HX_STACKFRAME(&_hx_pos_d207dc21e1bba0ef_458_new)
HXLINE( 459)		this->value = value;
HXLINE( 460)		super::__construct();
            	}

Dynamic MagLevNumber_obj::__CreateEmpty() { return new MagLevNumber_obj; }

void *MagLevNumber_obj::_hx_vtable = 0;

Dynamic MagLevNumber_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MagLevNumber_obj > _hx_result = new MagLevNumber_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool MagLevNumber_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x37a67bbd) {
		return inClassId==(int)0x00000001 || inClassId==(int)0x37a67bbd;
	} else {
		return inClassId==(int)0x7fdb9bc4;
	}
}

Float MagLevNumber_obj::getFloat(){
            	HX_STACKFRAME(&_hx_pos_d207dc21e1bba0ef_463_getFloat)
HXDLIN( 463)		return this->value;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MagLevNumber_obj,getFloat,return )

int MagLevNumber_obj::getInt(){
            	HX_STACKFRAME(&_hx_pos_d207dc21e1bba0ef_466_getInt)
HXDLIN( 466)		return ::Std_obj::_hx_int(this->value);
            	}


HX_DEFINE_DYNAMIC_FUNC0(MagLevNumber_obj,getInt,return )

int MagLevNumber_obj::getType(){
            	HX_STACKFRAME(&_hx_pos_d207dc21e1bba0ef_469_getType)
HXDLIN( 469)		return 4;
            	}


bool MagLevNumber_obj::isEqual( ::maglev::MagLevAny other){
            	HX_STACKFRAME(&_hx_pos_d207dc21e1bba0ef_475_isEqual)
HXDLIN( 475)		int _hx_tmp = other->getType();
HXDLIN( 475)		if ((_hx_tmp == this->getType())) {
HXLINE( 476)			 ::maglev::MagLevNumber o = ::hx::TCast<  ::maglev::MagLevNumber >::cast(other);
HXLINE( 477)			Float _hx_tmp = this->getFloat();
HXDLIN( 477)			return (_hx_tmp == o->getFloat());
            		}
            		else {
HXLINE( 480)			return false;
            		}
HXLINE( 475)		return false;
            	}


 ::maglev::MagLevString MagLevNumber_obj::toJson(){
            	HX_GC_STACKFRAME(&_hx_pos_d207dc21e1bba0ef_484_toJson)
HXDLIN( 484)		return  ::maglev::MagLevString_obj::__alloc( HX_CTX ,::Std_obj::string(this->value));
            	}


 ::maglev::MagLevNumber MagLevNumber_obj::fromFloat(Float value){
            	HX_GC_STACKFRAME(&_hx_pos_d207dc21e1bba0ef_453_fromFloat)
HXDLIN( 453)		return  ::maglev::MagLevNumber_obj::__alloc( HX_CTX ,value);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MagLevNumber_obj,fromFloat,return )

 ::maglev::MagLevNumber MagLevNumber_obj::fromInt(int value){
            	HX_GC_STACKFRAME(&_hx_pos_d207dc21e1bba0ef_456_fromInt)
HXDLIN( 456)		return  ::maglev::MagLevNumber_obj::__alloc( HX_CTX ,( (Float)(value) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MagLevNumber_obj,fromInt,return )

int MagLevNumber_obj::getStaticType(){
            	HX_STACKFRAME(&_hx_pos_d207dc21e1bba0ef_472_getStaticType)
HXDLIN( 472)		return 4;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(MagLevNumber_obj,getStaticType,return )


::hx::ObjectPtr< MagLevNumber_obj > MagLevNumber_obj::__new(Float value) {
	::hx::ObjectPtr< MagLevNumber_obj > __this = new MagLevNumber_obj();
	__this->__construct(value);
	return __this;
}

::hx::ObjectPtr< MagLevNumber_obj > MagLevNumber_obj::__alloc(::hx::Ctx *_hx_ctx,Float value) {
	MagLevNumber_obj *__this = (MagLevNumber_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MagLevNumber_obj), false, "maglev.MagLevNumber"));
	*(void **)__this = MagLevNumber_obj::_hx_vtable;
	__this->__construct(value);
	return __this;
}

MagLevNumber_obj::MagLevNumber_obj()
{
}

::hx::Val MagLevNumber_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { return ::hx::Val( value ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"getInt") ) { return ::hx::Val( getInt_dyn() ); }
		if (HX_FIELD_EQ(inName,"toJson") ) { return ::hx::Val( toJson_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"getType") ) { return ::hx::Val( getType_dyn() ); }
		if (HX_FIELD_EQ(inName,"isEqual") ) { return ::hx::Val( isEqual_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"getFloat") ) { return ::hx::Val( getFloat_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MagLevNumber_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"fromInt") ) { outValue = fromInt_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromFloat") ) { outValue = fromFloat_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getStaticType") ) { outValue = getStaticType_dyn(); return true; }
	}
	return false;
}

::hx::Val MagLevNumber_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"value") ) { value=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MagLevNumber_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("value",71,7f,b8,31));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MagLevNumber_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(MagLevNumber_obj,value),HX_("value",71,7f,b8,31)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *MagLevNumber_obj_sStaticStorageInfo = 0;
#endif

static ::String MagLevNumber_obj_sMemberFields[] = {
	HX_("value",71,7f,b8,31),
	HX_("getFloat",26,d5,6d,62),
	HX_("getInt",f9,45,1f,a3),
	HX_("getType",70,a2,8b,1f),
	HX_("isEqual",6a,73,08,0f),
	HX_("toJson",43,ad,21,7c),
	::String(null()) };

::hx::Class MagLevNumber_obj::__mClass;

static ::String MagLevNumber_obj_sStaticFields[] = {
	HX_("fromFloat",d2,af,1f,b7),
	HX_("fromInt",a5,dd,fa,57),
	HX_("getStaticType",be,46,27,0b),
	::String(null())
};

void MagLevNumber_obj::__register()
{
	MagLevNumber_obj _hx_dummy;
	MagLevNumber_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("maglev.MagLevNumber",57,bd,f1,0c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MagLevNumber_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(MagLevNumber_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MagLevNumber_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MagLevNumber_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MagLevNumber_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MagLevNumber_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace maglev
