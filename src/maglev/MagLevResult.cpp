// Generated by Haxe 4.1.1
#include <hxcpp.h>

#ifndef INCLUDED_haxe_Exception
#include <haxe/Exception.h>
#endif
#ifndef INCLUDED_maglev_MagLevAny
#include <maglev/MagLevAny.h>
#endif
#ifndef INCLUDED_maglev_MagLevError
#include <maglev/MagLevError.h>
#endif
#ifndef INCLUDED_maglev_MagLevNull
#include <maglev/MagLevNull.h>
#endif
#ifndef INCLUDED_maglev_MagLevResult
#include <maglev/MagLevResult.h>
#endif
#ifndef INCLUDED_maglev_MagLevString
#include <maglev/MagLevString.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_602e708537b55410_119_new,"maglev.MagLevResult","new",0xfe52d1dd,"maglev.MagLevResult.new","maglev/MagLev.hx",119,0x5b19476f)
HX_LOCAL_STACK_FRAME(_hx_pos_602e708537b55410_128_isAsync,"maglev.MagLevResult","isAsync",0x8beda6ef,"maglev.MagLevResult.isAsync","maglev/MagLev.hx",128,0x5b19476f)
HX_LOCAL_STACK_FRAME(_hx_pos_602e708537b55410_131_isComplete,"maglev.MagLevResult","isComplete",0x6a6beae6,"maglev.MagLevResult.isComplete","maglev/MagLev.hx",131,0x5b19476f)
HX_LOCAL_STACK_FRAME(_hx_pos_602e708537b55410_133_isError,"maglev.MagLevResult","isError",0xd8d9737b,"maglev.MagLevResult.isError","maglev/MagLev.hx",133,0x5b19476f)
HX_LOCAL_STACK_FRAME(_hx_pos_602e708537b55410_137_getResult,"maglev.MagLevResult","getResult",0x6f8baf50,"maglev.MagLevResult.getResult","maglev/MagLev.hx",137,0x5b19476f)
HX_LOCAL_STACK_FRAME(_hx_pos_602e708537b55410_141_setResult,"maglev.MagLevResult","setResult",0x52dc9b5c,"maglev.MagLevResult.setResult","maglev/MagLev.hx",141,0x5b19476f)
HX_LOCAL_STACK_FRAME(_hx_pos_602e708537b55410_150_getError,"maglev.MagLevResult","getError",0x0e9a54b5,"maglev.MagLevResult.getError","maglev/MagLev.hx",150,0x5b19476f)
HX_LOCAL_STACK_FRAME(_hx_pos_602e708537b55410_154_setError,"maglev.MagLevResult","setError",0xbcf7ae29,"maglev.MagLevResult.setError","maglev/MagLev.hx",154,0x5b19476f)
HX_LOCAL_STACK_FRAME(_hx_pos_602e708537b55410_165_onResult,"maglev.MagLevResult","onResult",0x23cad8bf,"maglev.MagLevResult.onResult","maglev/MagLev.hx",165,0x5b19476f)
HX_LOCAL_STACK_FRAME(_hx_pos_602e708537b55410_168_onResult,"maglev.MagLevResult","onResult",0x23cad8bf,"maglev.MagLevResult.onResult","maglev/MagLev.hx",168,0x5b19476f)
HX_LOCAL_STACK_FRAME(_hx_pos_602e708537b55410_163_onResult,"maglev.MagLevResult","onResult",0x23cad8bf,"maglev.MagLevResult.onResult","maglev/MagLev.hx",163,0x5b19476f)
HX_LOCAL_STACK_FRAME(_hx_pos_602e708537b55410_186_onError,"maglev.MagLevResult","onError",0xd2916e26,"maglev.MagLevResult.onError","maglev/MagLev.hx",186,0x5b19476f)
HX_LOCAL_STACK_FRAME(_hx_pos_602e708537b55410_189_onError,"maglev.MagLevResult","onError",0xd2916e26,"maglev.MagLevResult.onError","maglev/MagLev.hx",189,0x5b19476f)
HX_LOCAL_STACK_FRAME(_hx_pos_602e708537b55410_184_onError,"maglev.MagLevResult","onError",0xd2916e26,"maglev.MagLevResult.onError","maglev/MagLev.hx",184,0x5b19476f)
HX_LOCAL_STACK_FRAME(_hx_pos_602e708537b55410_206_getType,"maglev.MagLevResult","getType",0xe8b5a66d,"maglev.MagLevResult.getType","maglev/MagLev.hx",206,0x5b19476f)
HX_LOCAL_STACK_FRAME(_hx_pos_602e708537b55410_213_isEqual,"maglev.MagLevResult","isEqual",0xd8327767,"maglev.MagLevResult.isEqual","maglev/MagLev.hx",213,0x5b19476f)
HX_LOCAL_STACK_FRAME(_hx_pos_602e708537b55410_225_toJson,"maglev.MagLevResult","toJson",0x0358f7e6,"maglev.MagLevResult.toJson","maglev/MagLev.hx",225,0x5b19476f)
HX_LOCAL_STACK_FRAME(_hx_pos_602e708537b55410_105_fromResult,"maglev.MagLevResult","fromResult",0xbbbd460a,"maglev.MagLevResult.fromResult","maglev/MagLev.hx",105,0x5b19476f)
HX_LOCAL_STACK_FRAME(_hx_pos_602e708537b55410_110_fromError,"maglev.MagLevResult","fromError",0x1263733b,"maglev.MagLevResult.fromError","maglev/MagLev.hx",110,0x5b19476f)
HX_LOCAL_STACK_FRAME(_hx_pos_602e708537b55410_115_createAsync,"maglev.MagLevResult","createAsync",0xd6017d1d,"maglev.MagLevResult.createAsync","maglev/MagLev.hx",115,0x5b19476f)
HX_LOCAL_STACK_FRAME(_hx_pos_602e708537b55410_209_getStaticType,"maglev.MagLevResult","getStaticType",0xe8ebe67b,"maglev.MagLevResult.getStaticType","maglev/MagLev.hx",209,0x5b19476f)
namespace maglev{

void MagLevResult_obj::__construct(bool async){
            	HX_STACKFRAME(&_hx_pos_602e708537b55410_119_new)
HXLINE( 120)		this->async = async;
HXLINE( 121)		this->result = null();
HXLINE( 122)		this->error = null();
HXLINE( 123)		this->complete = false;
HXLINE( 124)		this->accepts = ::Array_obj< ::Dynamic>::__new();
HXLINE( 125)		this->rejects = ::Array_obj< ::Dynamic>::__new();
            	}

Dynamic MagLevResult_obj::__CreateEmpty() { return new MagLevResult_obj; }

void *MagLevResult_obj::_hx_vtable = 0;

Dynamic MagLevResult_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MagLevResult_obj > _hx_result = new MagLevResult_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool MagLevResult_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x01e076c5;
}

bool MagLevResult_obj::isAsync(){
            	HX_STACKFRAME(&_hx_pos_602e708537b55410_128_isAsync)
HXDLIN( 128)		return this->async;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MagLevResult_obj,isAsync,return )

bool MagLevResult_obj::isComplete(){
            	HX_STACKFRAME(&_hx_pos_602e708537b55410_131_isComplete)
HXDLIN( 131)		return this->complete;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MagLevResult_obj,isComplete,return )

bool MagLevResult_obj::isError(){
            	HX_STACKFRAME(&_hx_pos_602e708537b55410_133_isError)
HXLINE( 134)		if (!(this->complete)) {
HXLINE( 134)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("isError(): Future result not complete",f1,9a,02,19)));
            		}
HXLINE( 135)		return ::hx::IsNull( this->result );
            	}


HX_DEFINE_DYNAMIC_FUNC0(MagLevResult_obj,isError,return )

 ::maglev::MagLevAny MagLevResult_obj::getResult(){
            	HX_STACKFRAME(&_hx_pos_602e708537b55410_137_getResult)
HXLINE( 138)		if (!(this->complete)) {
HXLINE( 138)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("getResult(): Future result not complete",46,52,80,6e)));
            		}
HXLINE( 139)		return this->result;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MagLevResult_obj,getResult,return )

void MagLevResult_obj::setResult( ::maglev::MagLevAny res){
            	HX_STACKFRAME(&_hx_pos_602e708537b55410_141_setResult)
HXLINE( 142)		if (this->complete) {
HXLINE( 142)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("setResult(): Result was already complete",55,6f,01,a4)));
            		}
HXLINE( 143)		this->result = res;
HXLINE( 144)		this->error = null();
HXLINE( 145)		this->complete = true;
HXLINE( 146)		{
HXLINE( 146)			int _g = 0;
HXDLIN( 146)			::Array< ::Dynamic> _g1 = this->accepts;
HXDLIN( 146)			while((_g < _g1->length)){
HXLINE( 146)				 ::Dynamic accept = _g1->__get(_g);
HXDLIN( 146)				_g = (_g + 1);
HXLINE( 147)				accept(res);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MagLevResult_obj,setResult,(void))

 ::maglev::MagLevError MagLevResult_obj::getError(){
            	HX_STACKFRAME(&_hx_pos_602e708537b55410_150_getError)
HXLINE( 151)		if (!(this->complete)) {
HXLINE( 151)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("getError(): Future result not complete",c5,79,ef,3d)));
            		}
HXLINE( 152)		return this->error;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MagLevResult_obj,getError,return )

void MagLevResult_obj::setError( ::maglev::MagLevError err){
            	HX_STACKFRAME(&_hx_pos_602e708537b55410_154_setError)
HXLINE( 155)		if (this->complete) {
HXLINE( 155)			HX_STACK_DO_THROW(::haxe::Exception_obj::thrown(HX_("setError(): Result was already complete",8e,6e,9e,f4)));
            		}
HXLINE( 156)		this->result = null();
HXLINE( 157)		this->error = err;
HXLINE( 158)		this->complete = true;
HXLINE( 159)		{
HXLINE( 159)			int _g = 0;
HXDLIN( 159)			::Array< ::Dynamic> _g1 = this->rejects;
HXDLIN( 159)			while((_g < _g1->length)){
HXLINE( 159)				 ::Dynamic reject = _g1->__get(_g);
HXDLIN( 159)				_g = (_g + 1);
HXLINE( 160)				reject(err);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(MagLevResult_obj,setError,(void))

 ::maglev::MagLevResult MagLevResult_obj::onResult( ::Dynamic callback){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::maglev::MagLevResult,future, ::Dynamic,callback) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevAny result){
            			HX_STACKFRAME(&_hx_pos_602e708537b55410_165_onResult)
HXLINE( 166)			 ::maglev::MagLevResult ret = ( ( ::maglev::MagLevResult)(callback(result)) );
HXLINE( 167)			if (ret->isAsync()) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::maglev::MagLevResult,future) HXARGC(1)
            				 ::maglev::MagLevResult _hx_run( ::maglev::MagLevAny result2){
            					HX_STACKFRAME(&_hx_pos_602e708537b55410_168_onResult)
HXLINE( 169)					future->setResult(result2);
HXLINE( 170)					return ::maglev::MagLevResult_obj::fromResult(::maglev::MagLevNull_obj::create());
            				}
            				HX_END_LOCAL_FUNC1(return)

HXLINE( 168)				ret->onResult( ::Dynamic(new _hx_Closure_0(future)));
            			}
HXLINE( 173)			return ::maglev::MagLevResult_obj::fromResult(::maglev::MagLevNull_obj::create());
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_602e708537b55410_163_onResult)
HXLINE( 164)		 ::maglev::MagLevResult future = ::maglev::MagLevResult_obj::createAsync();
HXLINE( 165)		 ::Dynamic accept =  ::Dynamic(new _hx_Closure_1(future,callback));
HXLINE( 175)		this->accepts->push(accept);
HXLINE( 176)		if (this->complete) {
HXLINE( 178)			if (!(this->isError())) {
HXLINE( 179)				accept(this->getResult());
            			}
            		}
HXLINE( 182)		return future;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MagLevResult_obj,onResult,return )

 ::maglev::MagLevResult MagLevResult_obj::onError( ::Dynamic callback){
            		HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_1, ::maglev::MagLevResult,future, ::Dynamic,callback) HXARGC(1)
            		 ::maglev::MagLevResult _hx_run( ::maglev::MagLevError error){
            			HX_STACKFRAME(&_hx_pos_602e708537b55410_186_onError)
HXLINE( 187)			 ::maglev::MagLevResult ret = ( ( ::maglev::MagLevResult)(callback(error)) );
HXLINE( 188)			if (ret->isAsync()) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::maglev::MagLevResult,future) HXARGC(1)
            				 ::maglev::MagLevResult _hx_run( ::maglev::MagLevError error2){
            					HX_STACKFRAME(&_hx_pos_602e708537b55410_189_onError)
HXLINE( 190)					future->setError(error2);
HXLINE( 191)					return ::maglev::MagLevResult_obj::fromResult(::maglev::MagLevNull_obj::create());
            				}
            				HX_END_LOCAL_FUNC1(return)

HXLINE( 189)				ret->onError( ::Dynamic(new _hx_Closure_0(future)));
            			}
HXLINE( 194)			return ::maglev::MagLevResult_obj::fromResult(::maglev::MagLevNull_obj::create());
            		}
            		HX_END_LOCAL_FUNC1(return)

            	HX_STACKFRAME(&_hx_pos_602e708537b55410_184_onError)
HXLINE( 185)		 ::maglev::MagLevResult future = ::maglev::MagLevResult_obj::createAsync();
HXLINE( 186)		 ::Dynamic reject =  ::Dynamic(new _hx_Closure_1(future,callback));
HXLINE( 196)		this->rejects->push(reject);
HXLINE( 197)		if (this->complete) {
HXLINE( 199)			if (this->isError()) {
HXLINE( 200)				reject(this->getError());
            			}
            		}
HXLINE( 203)		return future;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MagLevResult_obj,onError,return )

int MagLevResult_obj::getType(){
            	HX_STACKFRAME(&_hx_pos_602e708537b55410_206_getType)
HXDLIN( 206)		return 110;
            	}


HX_DEFINE_DYNAMIC_FUNC0(MagLevResult_obj,getType,return )

bool MagLevResult_obj::isEqual( ::maglev::MagLevResult other){
            	HX_STACKFRAME(&_hx_pos_602e708537b55410_213_isEqual)
HXDLIN( 213)		bool _hx_tmp = this->isError();
HXDLIN( 213)		if ((_hx_tmp == other->isError())) {
HXLINE( 215)			if (this->isError()) {
HXLINE( 216)				 ::maglev::MagLevError _hx_tmp = this->getError();
HXDLIN( 216)				return _hx_tmp->isEqual(other->getError());
            			}
            			else {
HXLINE( 218)				 ::maglev::MagLevAny _hx_tmp = this->getResult();
HXDLIN( 218)				return _hx_tmp->isEqual(other->getResult());
            			}
            		}
            		else {
HXLINE( 222)			return false;
            		}
HXLINE( 213)		return false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MagLevResult_obj,isEqual,return )

 ::maglev::MagLevString MagLevResult_obj::toJson(){
            	HX_GC_STACKFRAME(&_hx_pos_602e708537b55410_225_toJson)
HXLINE( 226)		::String res = HX_("null",87,9e,0e,49);
HXLINE( 227)		::String err = HX_("null",87,9e,0e,49);
HXLINE( 228)		if (this->isError()) {
HXLINE( 229)			err = this->error->toJson()->getString();
            		}
            		else {
HXLINE( 231)			res = this->result->toJson()->getString();
            		}
HXLINE( 233)		return  ::maglev::MagLevString_obj::__alloc( HX_CTX ,((((HX_("{\"result\": ",64,32,1c,e7) + res) + HX_(", \"error\": ",ae,1d,ad,12)) + err) + HX_("}",7d,00,00,00)));
            	}


HX_DEFINE_DYNAMIC_FUNC0(MagLevResult_obj,toJson,return )

 ::maglev::MagLevResult MagLevResult_obj::fromResult( ::maglev::MagLevAny res){
            	HX_GC_STACKFRAME(&_hx_pos_602e708537b55410_105_fromResult)
HXLINE( 106)		 ::maglev::MagLevResult result =  ::maglev::MagLevResult_obj::__alloc( HX_CTX ,false);
HXLINE( 107)		result->setResult(res);
HXLINE( 108)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MagLevResult_obj,fromResult,return )

 ::maglev::MagLevResult MagLevResult_obj::fromError( ::maglev::MagLevError err){
            	HX_GC_STACKFRAME(&_hx_pos_602e708537b55410_110_fromError)
HXLINE( 111)		 ::maglev::MagLevResult result =  ::maglev::MagLevResult_obj::__alloc( HX_CTX ,false);
HXLINE( 112)		result->setError(err);
HXLINE( 113)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MagLevResult_obj,fromError,return )

 ::maglev::MagLevResult MagLevResult_obj::createAsync(){
            	HX_GC_STACKFRAME(&_hx_pos_602e708537b55410_115_createAsync)
HXLINE( 116)		 ::maglev::MagLevResult result =  ::maglev::MagLevResult_obj::__alloc( HX_CTX ,true);
HXLINE( 117)		return result;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(MagLevResult_obj,createAsync,return )

int MagLevResult_obj::getStaticType(){
            	HX_STACKFRAME(&_hx_pos_602e708537b55410_209_getStaticType)
HXDLIN( 209)		return 110;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(MagLevResult_obj,getStaticType,return )


::hx::ObjectPtr< MagLevResult_obj > MagLevResult_obj::__new(bool async) {
	::hx::ObjectPtr< MagLevResult_obj > __this = new MagLevResult_obj();
	__this->__construct(async);
	return __this;
}

::hx::ObjectPtr< MagLevResult_obj > MagLevResult_obj::__alloc(::hx::Ctx *_hx_ctx,bool async) {
	MagLevResult_obj *__this = (MagLevResult_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MagLevResult_obj), true, "maglev.MagLevResult"));
	*(void **)__this = MagLevResult_obj::_hx_vtable;
	__this->__construct(async);
	return __this;
}

MagLevResult_obj::MagLevResult_obj()
{
}

void MagLevResult_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MagLevResult);
	HX_MARK_MEMBER_NAME(result,"result");
	HX_MARK_MEMBER_NAME(error,"error");
	HX_MARK_MEMBER_NAME(async,"async");
	HX_MARK_MEMBER_NAME(complete,"complete");
	HX_MARK_MEMBER_NAME(accepts,"accepts");
	HX_MARK_MEMBER_NAME(rejects,"rejects");
	HX_MARK_END_CLASS();
}

void MagLevResult_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(result,"result");
	HX_VISIT_MEMBER_NAME(error,"error");
	HX_VISIT_MEMBER_NAME(async,"async");
	HX_VISIT_MEMBER_NAME(complete,"complete");
	HX_VISIT_MEMBER_NAME(accepts,"accepts");
	HX_VISIT_MEMBER_NAME(rejects,"rejects");
}

::hx::Val MagLevResult_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"error") ) { return ::hx::Val( error ); }
		if (HX_FIELD_EQ(inName,"async") ) { return ::hx::Val( async ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"result") ) { return ::hx::Val( result ); }
		if (HX_FIELD_EQ(inName,"toJson") ) { return ::hx::Val( toJson_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"accepts") ) { return ::hx::Val( accepts ); }
		if (HX_FIELD_EQ(inName,"rejects") ) { return ::hx::Val( rejects ); }
		if (HX_FIELD_EQ(inName,"isAsync") ) { return ::hx::Val( isAsync_dyn() ); }
		if (HX_FIELD_EQ(inName,"isError") ) { return ::hx::Val( isError_dyn() ); }
		if (HX_FIELD_EQ(inName,"onError") ) { return ::hx::Val( onError_dyn() ); }
		if (HX_FIELD_EQ(inName,"getType") ) { return ::hx::Val( getType_dyn() ); }
		if (HX_FIELD_EQ(inName,"isEqual") ) { return ::hx::Val( isEqual_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"complete") ) { return ::hx::Val( complete ); }
		if (HX_FIELD_EQ(inName,"getError") ) { return ::hx::Val( getError_dyn() ); }
		if (HX_FIELD_EQ(inName,"setError") ) { return ::hx::Val( setError_dyn() ); }
		if (HX_FIELD_EQ(inName,"onResult") ) { return ::hx::Val( onResult_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"getResult") ) { return ::hx::Val( getResult_dyn() ); }
		if (HX_FIELD_EQ(inName,"setResult") ) { return ::hx::Val( setResult_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"isComplete") ) { return ::hx::Val( isComplete_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool MagLevResult_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 9:
		if (HX_FIELD_EQ(inName,"fromError") ) { outValue = fromError_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromResult") ) { outValue = fromResult_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"createAsync") ) { outValue = createAsync_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"getStaticType") ) { outValue = getStaticType_dyn(); return true; }
	}
	return false;
}

::hx::Val MagLevResult_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"error") ) { error=inValue.Cast<  ::maglev::MagLevError >(); return inValue; }
		if (HX_FIELD_EQ(inName,"async") ) { async=inValue.Cast< bool >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"result") ) { result=inValue.Cast<  ::maglev::MagLevAny >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"accepts") ) { accepts=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rejects") ) { rejects=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"complete") ) { complete=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MagLevResult_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("result",dd,68,84,08));
	outFields->push(HX_("error",c8,cb,29,73));
	outFields->push(HX_("async",3c,ff,3d,26));
	outFields->push(HX_("complete",b9,00,c8,7f));
	outFields->push(HX_("accepts",6b,14,ba,9a));
	outFields->push(HX_("rejects",34,e2,21,32));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MagLevResult_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::maglev::MagLevAny */ ,(int)offsetof(MagLevResult_obj,result),HX_("result",dd,68,84,08)},
	{::hx::fsObject /*  ::maglev::MagLevError */ ,(int)offsetof(MagLevResult_obj,error),HX_("error",c8,cb,29,73)},
	{::hx::fsBool,(int)offsetof(MagLevResult_obj,async),HX_("async",3c,ff,3d,26)},
	{::hx::fsBool,(int)offsetof(MagLevResult_obj,complete),HX_("complete",b9,00,c8,7f)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(MagLevResult_obj,accepts),HX_("accepts",6b,14,ba,9a)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(MagLevResult_obj,rejects),HX_("rejects",34,e2,21,32)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *MagLevResult_obj_sStaticStorageInfo = 0;
#endif

static ::String MagLevResult_obj_sMemberFields[] = {
	HX_("result",dd,68,84,08),
	HX_("error",c8,cb,29,73),
	HX_("async",3c,ff,3d,26),
	HX_("complete",b9,00,c8,7f),
	HX_("accepts",6b,14,ba,9a),
	HX_("rejects",34,e2,21,32),
	HX_("isAsync",f2,a2,c3,c2),
	HX_("isComplete",c3,12,77,fa),
	HX_("isError",7e,6f,af,0f),
	HX_("getResult",13,f2,da,84),
	HX_("setResult",1f,de,2b,68),
	HX_("getError",52,db,00,d3),
	HX_("setError",c6,34,5e,81),
	HX_("onResult",5c,5f,31,e8),
	HX_("onError",29,6a,67,09),
	HX_("getType",70,a2,8b,1f),
	HX_("isEqual",6a,73,08,0f),
	HX_("toJson",43,ad,21,7c),
	::String(null()) };

::hx::Class MagLevResult_obj::__mClass;

static ::String MagLevResult_obj_sStaticFields[] = {
	HX_("fromResult",e7,6d,c8,4b),
	HX_("fromError",fe,b5,b2,27),
	HX_("createAsync",a0,36,b9,4f),
	HX_("getStaticType",be,46,27,0b),
	::String(null())
};

void MagLevResult_obj::__register()
{
	MagLevResult_obj _hx_dummy;
	MagLevResult_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("maglev.MagLevResult",6b,9f,fb,73);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MagLevResult_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(MagLevResult_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MagLevResult_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MagLevResult_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MagLevResult_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MagLevResult_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace maglev
