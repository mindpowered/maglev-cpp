// Generated by Haxe 4.1.1
#include <hxcpp.h>

#ifndef INCLUDED_haxe_iterators_StringIteratorUnicode
#include <maglev/haxe/iterators/StringIteratorUnicode.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_952cf0b39fded2d4_33_new,"haxe.iterators.StringIteratorUnicode","new",0x2c3f799f,"haxe.iterators.StringIteratorUnicode.new","/opt/haxe/std/haxe/iterators/StringIteratorUnicode.hx",33,0x6d2a5ee9)
HX_LOCAL_STACK_FRAME(_hx_pos_952cf0b39fded2d4_48_hasNext,"haxe.iterators.StringIteratorUnicode","hasNext",0x13f95a2c,"haxe.iterators.StringIteratorUnicode.hasNext","/opt/haxe/std/haxe/iterators/StringIteratorUnicode.hx",48,0x6d2a5ee9)
HX_LOCAL_STACK_FRAME(_hx_pos_952cf0b39fded2d4_55_next,"haxe.iterators.StringIteratorUnicode","next",0x8b4af2d4,"haxe.iterators.StringIteratorUnicode.next","/opt/haxe/std/haxe/iterators/StringIteratorUnicode.hx",55,0x6d2a5ee9)
HX_LOCAL_STACK_FRAME(_hx_pos_952cf0b39fded2d4_71_unicodeIterator,"haxe.iterators.StringIteratorUnicode","unicodeIterator",0x882a87ea,"haxe.iterators.StringIteratorUnicode.unicodeIterator","/opt/haxe/std/haxe/iterators/StringIteratorUnicode.hx",71,0x6d2a5ee9)
namespace haxe{
namespace iterators{

void StringIteratorUnicode_obj::__construct(::String s){
            	HX_STACKFRAME(&_hx_pos_952cf0b39fded2d4_33_new)
HXLINE(  34)		this->offset = 0;
HXLINE(  41)		this->s = s;
            	}

Dynamic StringIteratorUnicode_obj::__CreateEmpty() { return new StringIteratorUnicode_obj; }

void *StringIteratorUnicode_obj::_hx_vtable = 0;

Dynamic StringIteratorUnicode_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< StringIteratorUnicode_obj > _hx_result = new StringIteratorUnicode_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool StringIteratorUnicode_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x09c8f1e7;
}

bool StringIteratorUnicode_obj::hasNext(){
            	HX_STACKFRAME(&_hx_pos_952cf0b39fded2d4_48_hasNext)
HXDLIN(  48)		return (this->offset < this->s.length);
            	}


HX_DEFINE_DYNAMIC_FUNC0(StringIteratorUnicode_obj,hasNext,return )

int StringIteratorUnicode_obj::next(){
            	HX_STACKFRAME(&_hx_pos_952cf0b39fded2d4_55_next)
HXLINE(  57)		::String s = this->s;
HXDLIN(  57)		int index = this->offset++;
HXDLIN(  57)		int c = s.cca(index);
HXDLIN(  57)		bool _hx_tmp;
HXDLIN(  57)		if ((c >= 55296)) {
HXLINE(  57)			_hx_tmp = (c <= 56319);
            		}
            		else {
HXLINE(  57)			_hx_tmp = false;
            		}
HXDLIN(  57)		if (_hx_tmp) {
HXLINE(  57)			c = (((c - 55232) << 10) | (s.cca((index + 1)) & 1023));
            		}
HXDLIN(  57)		int c1 = c;
HXLINE(  58)		if ((c1 >= 65536)) {
HXLINE(  59)			this->offset++;
            		}
HXLINE(  61)		return c1;
            	}


HX_DEFINE_DYNAMIC_FUNC0(StringIteratorUnicode_obj,next,return )

 ::haxe::iterators::StringIteratorUnicode StringIteratorUnicode_obj::unicodeIterator(::String s){
            	HX_GC_STACKFRAME(&_hx_pos_952cf0b39fded2d4_71_unicodeIterator)
HXDLIN(  71)		return  ::haxe::iterators::StringIteratorUnicode_obj::__alloc( HX_CTX ,s);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(StringIteratorUnicode_obj,unicodeIterator,return )


StringIteratorUnicode_obj::StringIteratorUnicode_obj()
{
}

void StringIteratorUnicode_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(StringIteratorUnicode);
	HX_MARK_MEMBER_NAME(offset,"offset");
	HX_MARK_MEMBER_NAME(s,"s");
	HX_MARK_END_CLASS();
}

void StringIteratorUnicode_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(offset,"offset");
	HX_VISIT_MEMBER_NAME(s,"s");
}

::hx::Val StringIteratorUnicode_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"s") ) { return ::hx::Val( s ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return ::hx::Val( next_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"offset") ) { return ::hx::Val( offset ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"hasNext") ) { return ::hx::Val( hasNext_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool StringIteratorUnicode_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 15:
		if (HX_FIELD_EQ(inName,"unicodeIterator") ) { outValue = unicodeIterator_dyn(); return true; }
	}
	return false;
}

::hx::Val StringIteratorUnicode_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"s") ) { s=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"offset") ) { offset=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void StringIteratorUnicode_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("offset",93,97,3f,60));
	outFields->push(HX_("s",73,00,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo StringIteratorUnicode_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(StringIteratorUnicode_obj,offset),HX_("offset",93,97,3f,60)},
	{::hx::fsString,(int)offsetof(StringIteratorUnicode_obj,s),HX_("s",73,00,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *StringIteratorUnicode_obj_sStaticStorageInfo = 0;
#endif

static ::String StringIteratorUnicode_obj_sMemberFields[] = {
	HX_("offset",93,97,3f,60),
	HX_("s",73,00,00,00),
	HX_("hasNext",6d,a5,46,18),
	HX_("next",f3,84,02,49),
	::String(null()) };

::hx::Class StringIteratorUnicode_obj::__mClass;

static ::String StringIteratorUnicode_obj_sStaticFields[] = {
	HX_("unicodeIterator",2b,7c,86,6a),
	::String(null())
};

void StringIteratorUnicode_obj::__register()
{
	StringIteratorUnicode_obj _hx_dummy;
	StringIteratorUnicode_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.iterators.StringIteratorUnicode",2d,be,44,90);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &StringIteratorUnicode_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(StringIteratorUnicode_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(StringIteratorUnicode_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< StringIteratorUnicode_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StringIteratorUnicode_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StringIteratorUnicode_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace iterators
