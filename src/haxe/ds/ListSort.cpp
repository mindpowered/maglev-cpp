// Generated by Haxe 4.1.1
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ds_ListSort
#include <haxe/ds/ListSort.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_684de719433c5aa8_42_sort,"haxe.ds.ListSort","sort",0x6a521e39,"haxe.ds.ListSort.sort","/opt/haxe/std/haxe/ds/ListSort.hx",42,0xf60e4281)
HX_LOCAL_STACK_FRAME(_hx_pos_684de719433c5aa8_99_sortSingleLinked,"haxe.ds.ListSort","sortSingleLinked",0x09c7af5a,"haxe.ds.ListSort.sortSingleLinked","/opt/haxe/std/haxe/ds/ListSort.hx",99,0xf60e4281)
namespace haxe{
namespace ds{

void ListSort_obj::__construct() { }

Dynamic ListSort_obj::__CreateEmpty() { return new ListSort_obj; }

void *ListSort_obj::_hx_vtable = 0;

Dynamic ListSort_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ListSort_obj > _hx_result = new ListSort_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ListSort_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x71bac631;
}

 ::Dynamic ListSort_obj::sort( ::Dynamic list, ::Dynamic cmp){
            	HX_STACKFRAME(&_hx_pos_684de719433c5aa8_42_sort)
HXLINE(  44)		if (::hx::IsNull( list )) {
HXLINE(  45)			return null();
            		}
HXLINE(  46)		int insize = 1;
HXDLIN(  46)		int nmerges;
HXDLIN(  46)		int psize = 0;
HXDLIN(  46)		int qsize = 0;
HXLINE(  47)		 ::Dynamic p;
HXDLIN(  47)		 ::Dynamic q;
HXDLIN(  47)		 ::Dynamic e;
HXDLIN(  47)		 ::Dynamic tail = null();
HXLINE(  48)		while(true){
HXLINE(  49)			p = list;
HXLINE(  50)			list = null();
HXLINE(  51)			tail = null();
HXLINE(  52)			nmerges = 0;
HXLINE(  53)			while(::hx::IsNotNull( p )){
HXLINE(  54)				nmerges = (nmerges + 1);
HXLINE(  55)				q = p;
HXLINE(  56)				psize = 0;
HXLINE(  57)				{
HXLINE(  57)					int _g = 0;
HXDLIN(  57)					int _g1 = insize;
HXDLIN(  57)					while((_g < _g1)){
HXLINE(  57)						_g = (_g + 1);
HXDLIN(  57)						int i = (_g - 1);
HXLINE(  58)						psize = (psize + 1);
HXLINE(  59)						q =  ::Dynamic(q->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic));
HXLINE(  60)						if (::hx::IsNull( q )) {
HXLINE(  61)							goto _hx_goto_2;
            						}
            					}
            					_hx_goto_2:;
            				}
HXLINE(  63)				qsize = insize;
HXLINE(  64)				while(true){
HXLINE(  64)					bool _hx_tmp;
HXDLIN(  64)					if ((psize <= 0)) {
HXLINE(  64)						if ((qsize > 0)) {
HXLINE(  64)							_hx_tmp = ::hx::IsNotNull( q );
            						}
            						else {
HXLINE(  64)							_hx_tmp = false;
            						}
            					}
            					else {
HXLINE(  64)						_hx_tmp = true;
            					}
HXDLIN(  64)					if (!(_hx_tmp)) {
HXLINE(  64)						goto _hx_goto_3;
            					}
HXLINE(  65)					if ((psize == 0)) {
HXLINE(  66)						e = q;
HXLINE(  67)						q =  ::Dynamic(q->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic));
HXLINE(  68)						qsize = (qsize - 1);
            					}
            					else {
HXLINE(  69)						bool _hx_tmp;
HXDLIN(  69)						bool _hx_tmp1;
HXDLIN(  69)						if ((qsize != 0)) {
HXLINE(  69)							_hx_tmp1 = ::hx::IsNull( q );
            						}
            						else {
HXLINE(  69)							_hx_tmp1 = true;
            						}
HXDLIN(  69)						if (!(_hx_tmp1)) {
HXLINE(  69)							_hx_tmp = ::hx::IsLessEq( cmp(p,q),0 );
            						}
            						else {
HXLINE(  69)							_hx_tmp = true;
            						}
HXDLIN(  69)						if (_hx_tmp) {
HXLINE(  70)							e = p;
HXLINE(  71)							p =  ::Dynamic(p->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic));
HXLINE(  72)							psize = (psize - 1);
            						}
            						else {
HXLINE(  74)							e = q;
HXLINE(  75)							q =  ::Dynamic(q->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic));
HXLINE(  76)							qsize = (qsize - 1);
            						}
            					}
HXLINE(  78)					if (::hx::IsNotNull( tail )) {
HXLINE(  79)						tail->__SetField(HX_("next",f3,84,02,49),e,::hx::paccDynamic);
            					}
            					else {
HXLINE(  81)						list = e;
            					}
HXLINE(  82)					e->__SetField(HX_("prev",f3,be,5e,4a),tail,::hx::paccDynamic);
HXLINE(  83)					tail = e;
            				}
            				_hx_goto_3:;
HXLINE(  85)				p = q;
            			}
HXLINE(  87)			tail->__SetField(HX_("next",f3,84,02,49),null(),::hx::paccDynamic);
HXLINE(  88)			if ((nmerges <= 1)) {
HXLINE(  89)				goto _hx_goto_0;
            			}
HXLINE(  90)			insize = (insize * 2);
            		}
            		_hx_goto_0:;
HXLINE(  92)		list->__SetField(HX_("prev",f3,be,5e,4a),tail,::hx::paccDynamic);
HXLINE(  93)		return list;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ListSort_obj,sort,return )

 ::Dynamic ListSort_obj::sortSingleLinked( ::Dynamic list, ::Dynamic cmp){
            	HX_STACKFRAME(&_hx_pos_684de719433c5aa8_99_sortSingleLinked)
HXLINE( 100)		if (::hx::IsNull( list )) {
HXLINE( 101)			return null();
            		}
HXLINE( 102)		int insize = 1;
HXDLIN( 102)		int nmerges;
HXDLIN( 102)		int psize = 0;
HXDLIN( 102)		int qsize = 0;
HXLINE( 103)		 ::Dynamic p;
HXDLIN( 103)		 ::Dynamic q;
HXDLIN( 103)		 ::Dynamic e;
HXDLIN( 103)		 ::Dynamic tail;
HXLINE( 104)		while(true){
HXLINE( 105)			p = list;
HXLINE( 106)			list = null();
HXLINE( 107)			tail = null();
HXLINE( 108)			nmerges = 0;
HXLINE( 109)			while(::hx::IsNotNull( p )){
HXLINE( 110)				nmerges = (nmerges + 1);
HXLINE( 111)				q = p;
HXLINE( 112)				psize = 0;
HXLINE( 113)				{
HXLINE( 113)					int _g = 0;
HXDLIN( 113)					int _g1 = insize;
HXDLIN( 113)					while((_g < _g1)){
HXLINE( 113)						_g = (_g + 1);
HXDLIN( 113)						int i = (_g - 1);
HXLINE( 114)						psize = (psize + 1);
HXLINE( 115)						q =  ::Dynamic(q->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic));
HXLINE( 116)						if (::hx::IsNull( q )) {
HXLINE( 117)							goto _hx_goto_7;
            						}
            					}
            					_hx_goto_7:;
            				}
HXLINE( 119)				qsize = insize;
HXLINE( 120)				while(true){
HXLINE( 120)					bool _hx_tmp;
HXDLIN( 120)					if ((psize <= 0)) {
HXLINE( 120)						if ((qsize > 0)) {
HXLINE( 120)							_hx_tmp = ::hx::IsNotNull( q );
            						}
            						else {
HXLINE( 120)							_hx_tmp = false;
            						}
            					}
            					else {
HXLINE( 120)						_hx_tmp = true;
            					}
HXDLIN( 120)					if (!(_hx_tmp)) {
HXLINE( 120)						goto _hx_goto_8;
            					}
HXLINE( 121)					if ((psize == 0)) {
HXLINE( 122)						e = q;
HXLINE( 123)						q =  ::Dynamic(q->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic));
HXLINE( 124)						qsize = (qsize - 1);
            					}
            					else {
HXLINE( 125)						bool _hx_tmp;
HXDLIN( 125)						bool _hx_tmp1;
HXDLIN( 125)						if ((qsize != 0)) {
HXLINE( 125)							_hx_tmp1 = ::hx::IsNull( q );
            						}
            						else {
HXLINE( 125)							_hx_tmp1 = true;
            						}
HXDLIN( 125)						if (!(_hx_tmp1)) {
HXLINE( 125)							_hx_tmp = ::hx::IsLessEq( cmp(p,q),0 );
            						}
            						else {
HXLINE( 125)							_hx_tmp = true;
            						}
HXDLIN( 125)						if (_hx_tmp) {
HXLINE( 126)							e = p;
HXLINE( 127)							p =  ::Dynamic(p->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic));
HXLINE( 128)							psize = (psize - 1);
            						}
            						else {
HXLINE( 130)							e = q;
HXLINE( 131)							q =  ::Dynamic(q->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic));
HXLINE( 132)							qsize = (qsize - 1);
            						}
            					}
HXLINE( 134)					if (::hx::IsNotNull( tail )) {
HXLINE( 135)						tail->__SetField(HX_("next",f3,84,02,49),e,::hx::paccDynamic);
            					}
            					else {
HXLINE( 137)						list = e;
            					}
HXLINE( 138)					tail = e;
            				}
            				_hx_goto_8:;
HXLINE( 140)				p = q;
            			}
HXLINE( 142)			tail->__SetField(HX_("next",f3,84,02,49),null(),::hx::paccDynamic);
HXLINE( 143)			if ((nmerges <= 1)) {
HXLINE( 144)				goto _hx_goto_5;
            			}
HXLINE( 145)			insize = (insize * 2);
            		}
            		_hx_goto_5:;
HXLINE( 147)		return list;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ListSort_obj,sortSingleLinked,return )


ListSort_obj::ListSort_obj()
{
}

bool ListSort_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"sort") ) { outValue = sort_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"sortSingleLinked") ) { outValue = sortSingleLinked_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ListSort_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *ListSort_obj_sStaticStorageInfo = 0;
#endif

::hx::Class ListSort_obj::__mClass;

static ::String ListSort_obj_sStaticFields[] = {
	HX_("sort",5e,27,58,4c),
	HX_("sortSingleLinked",ff,5b,09,b6),
	::String(null())
};

void ListSort_obj::__register()
{
	ListSort_obj _hx_dummy;
	ListSort_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.ds.ListSort",73,d7,33,9b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ListSort_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ListSort_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< ListSort_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ListSort_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ListSort_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ds
