// Generated by Haxe 4.1.1
#include <hxcpp.h>

#ifndef INCLUDED_haxe_ds__ReadOnlyArray_ReadOnlyArray_Impl_
#include <maglev/haxe/ds/_ReadOnlyArray/ReadOnlyArray_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_3b5d80fbcc9870af_41_get_length,"haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_","get_length",0xa04b5705,"haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_.get_length","/opt/haxe/std/haxe/ds/ReadOnlyArray.hx",41,0x7b903348)
HX_LOCAL_STACK_FRAME(_hx_pos_3b5d80fbcc9870af_44_get,"haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_","get",0x6cc23f80,"haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_.get","/opt/haxe/std/haxe/ds/ReadOnlyArray.hx",44,0x7b903348)
namespace haxe{
namespace ds{
namespace _ReadOnlyArray{

void ReadOnlyArray_Impl__obj::__construct() { }

Dynamic ReadOnlyArray_Impl__obj::__CreateEmpty() { return new ReadOnlyArray_Impl__obj; }

void *ReadOnlyArray_Impl__obj::_hx_vtable = 0;

Dynamic ReadOnlyArray_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ReadOnlyArray_Impl__obj > _hx_result = new ReadOnlyArray_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool ReadOnlyArray_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6432b6ca;
}

int ReadOnlyArray_Impl__obj::get_length(::cpp::VirtualArray this1){
            	HX_STACKFRAME(&_hx_pos_3b5d80fbcc9870af_41_get_length)
HXDLIN(  41)		return this1->get_length();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(ReadOnlyArray_Impl__obj,get_length,return )

 ::Dynamic ReadOnlyArray_Impl__obj::get(::cpp::VirtualArray this1,int i){
            	HX_STACKFRAME(&_hx_pos_3b5d80fbcc9870af_44_get)
HXDLIN(  44)		return this1->__get(i);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(ReadOnlyArray_Impl__obj,get,return )


ReadOnlyArray_Impl__obj::ReadOnlyArray_Impl__obj()
{
}

bool ReadOnlyArray_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"get") ) { outValue = get_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"get_length") ) { outValue = get_length_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *ReadOnlyArray_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *ReadOnlyArray_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class ReadOnlyArray_Impl__obj::__mClass;

static ::String ReadOnlyArray_Impl__obj_sStaticFields[] = {
	HX_("get_length",af,04,8f,8f),
	HX_("get",96,80,4e,00),
	::String(null())
};

void ReadOnlyArray_Impl__obj::__register()
{
	ReadOnlyArray_Impl__obj _hx_dummy;
	ReadOnlyArray_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe.ds._ReadOnlyArray.ReadOnlyArray_Impl_",58,e2,2f,d0);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &ReadOnlyArray_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(ReadOnlyArray_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< ReadOnlyArray_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ReadOnlyArray_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ReadOnlyArray_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace ds
} // end namespace _ReadOnlyArray
