// Generated by Haxe 4.1.1
#include <hxcpp.h>

#ifndef INCLUDED_haxe__Int32_Int32_Impl_
#include <haxe/_Int32/Int32_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_fb6f0e500ad2c7ae_31_negate,"haxe._Int32.Int32_Impl_","negate",0x9b78dc39,"haxe._Int32.Int32_Impl_.negate","/opt/haxe/std/haxe/Int32.hx",31,0x0341320f)
HX_LOCAL_STACK_FRAME(_hx_pos_fb6f0e500ad2c7ae_34_preIncrement,"haxe._Int32.Int32_Impl_","preIncrement",0x5b883743,"haxe._Int32.Int32_Impl_.preIncrement","/opt/haxe/std/haxe/Int32.hx",34,0x0341320f)
HX_LOCAL_STACK_FRAME(_hx_pos_fb6f0e500ad2c7ae_36_postIncrement,"haxe._Int32.Int32_Impl_","postIncrement",0x744c8818,"haxe._Int32.Int32_Impl_.postIncrement","/opt/haxe/std/haxe/Int32.hx",36,0x0341320f)
HX_LOCAL_STACK_FRAME(_hx_pos_fb6f0e500ad2c7ae_43_preDecrement,"haxe._Int32.Int32_Impl_","preDecrement",0x3a0b2727,"haxe._Int32.Int32_Impl_.preDecrement","/opt/haxe/std/haxe/Int32.hx",43,0x0341320f)
HX_LOCAL_STACK_FRAME(_hx_pos_fb6f0e500ad2c7ae_45_postDecrement,"haxe._Int32.Int32_Impl_","postDecrement",0x52cf77fc,"haxe._Int32.Int32_Impl_.postDecrement","/opt/haxe/std/haxe/Int32.hx",45,0x0341320f)
HX_LOCAL_STACK_FRAME(_hx_pos_fb6f0e500ad2c7ae_52_add,"haxe._Int32.Int32_Impl_","add",0x389d374a,"haxe._Int32.Int32_Impl_.add","/opt/haxe/std/haxe/Int32.hx",52,0x0341320f)
HX_LOCAL_STACK_FRAME(_hx_pos_fb6f0e500ad2c7ae_55_addInt,"haxe._Int32.Int32_Impl_","addInt",0xd360b7c5,"haxe._Int32.Int32_Impl_.addInt","/opt/haxe/std/haxe/Int32.hx",55,0x0341320f)
HX_LOCAL_STACK_FRAME(_hx_pos_fb6f0e500ad2c7ae_60_sub,"haxe._Int32.Int32_Impl_","sub",0x38aaeea9,"haxe._Int32.Int32_Impl_.sub","/opt/haxe/std/haxe/Int32.hx",60,0x0341320f)
HX_LOCAL_STACK_FRAME(_hx_pos_fb6f0e500ad2c7ae_63_subInt,"haxe._Int32.Int32_Impl_","subInt",0xce4aa5c6,"haxe._Int32.Int32_Impl_.subInt","/opt/haxe/std/haxe/Int32.hx",63,0x0341320f)
HX_LOCAL_STACK_FRAME(_hx_pos_fb6f0e500ad2c7ae_66_intSub,"haxe._Int32.Int32_Impl_","intSub",0xd2d86e48,"haxe._Int32.Int32_Impl_.intSub","/opt/haxe/std/haxe/Int32.hx",66,0x0341320f)
HX_LOCAL_STACK_FRAME(_hx_pos_fb6f0e500ad2c7ae_248_toFloat,"haxe._Int32.Int32_Impl_","toFloat",0x6e629fca,"haxe._Int32.Int32_Impl_.toFloat","/opt/haxe/std/haxe/Int32.hx",248,0x0341320f)
HX_LOCAL_STACK_FRAME(_hx_pos_fb6f0e500ad2c7ae_253_ucompare,"haxe._Int32.Int32_Impl_","ucompare",0x66cba707,"haxe._Int32.Int32_Impl_.ucompare","/opt/haxe/std/haxe/Int32.hx",253,0x0341320f)
HX_LOCAL_STACK_FRAME(_hx_pos_fb6f0e500ad2c7ae_278_clamp,"haxe._Int32.Int32_Impl_","clamp",0xafe61464,"haxe._Int32.Int32_Impl_.clamp","/opt/haxe/std/haxe/Int32.hx",278,0x0341320f)
namespace haxe{
namespace _Int32{

void Int32_Impl__obj::__construct() { }

Dynamic Int32_Impl__obj::__CreateEmpty() { return new Int32_Impl__obj; }

void *Int32_Impl__obj::_hx_vtable = 0;

Dynamic Int32_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Int32_Impl__obj > _hx_result = new Int32_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Int32_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x23048859;
}

int Int32_Impl__obj::negate(int this1){
            	HX_STACKFRAME(&_hx_pos_fb6f0e500ad2c7ae_31_negate)
HXDLIN(  31)		return (~(this1) + 1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int32_Impl__obj,negate,return )

int Int32_Impl__obj::preIncrement(int this1){
            	HX_STACKFRAME(&_hx_pos_fb6f0e500ad2c7ae_34_preIncrement)
HXDLIN(  34)		this1 = (this1 + 1);
HXDLIN(  34)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int32_Impl__obj,preIncrement,return )

int Int32_Impl__obj::postIncrement(int this1){
            	HX_STACKFRAME(&_hx_pos_fb6f0e500ad2c7ae_36_postIncrement)
HXLINE(  37)		this1 = (this1 + 1);
HXDLIN(  37)		int ret = (this1 - 1);
HXLINE(  39)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int32_Impl__obj,postIncrement,return )

int Int32_Impl__obj::preDecrement(int this1){
            	HX_STACKFRAME(&_hx_pos_fb6f0e500ad2c7ae_43_preDecrement)
HXDLIN(  43)		this1 = (this1 - 1);
HXDLIN(  43)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int32_Impl__obj,preDecrement,return )

int Int32_Impl__obj::postDecrement(int this1){
            	HX_STACKFRAME(&_hx_pos_fb6f0e500ad2c7ae_45_postDecrement)
HXLINE(  46)		this1 = (this1 - 1);
HXDLIN(  46)		int ret = (this1 + 1);
HXLINE(  48)		return ret;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int32_Impl__obj,postDecrement,return )

int Int32_Impl__obj::add(int a,int b){
            	HX_STACKFRAME(&_hx_pos_fb6f0e500ad2c7ae_52_add)
HXDLIN(  52)		return (a + b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int32_Impl__obj,add,return )

int Int32_Impl__obj::addInt(int a,int b){
            	HX_STACKFRAME(&_hx_pos_fb6f0e500ad2c7ae_55_addInt)
HXDLIN(  55)		return (a + b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int32_Impl__obj,addInt,return )

int Int32_Impl__obj::sub(int a,int b){
            	HX_STACKFRAME(&_hx_pos_fb6f0e500ad2c7ae_60_sub)
HXDLIN(  60)		return (a - b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int32_Impl__obj,sub,return )

int Int32_Impl__obj::subInt(int a,int b){
            	HX_STACKFRAME(&_hx_pos_fb6f0e500ad2c7ae_63_subInt)
HXDLIN(  63)		return (a - b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int32_Impl__obj,subInt,return )

int Int32_Impl__obj::intSub(int a,int b){
            	HX_STACKFRAME(&_hx_pos_fb6f0e500ad2c7ae_66_intSub)
HXDLIN(  66)		return (a - b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int32_Impl__obj,intSub,return )

Float Int32_Impl__obj::toFloat(int this1){
            	HX_STACKFRAME(&_hx_pos_fb6f0e500ad2c7ae_248_toFloat)
HXDLIN( 248)		return ( (Float)(this1) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int32_Impl__obj,toFloat,return )

int Int32_Impl__obj::ucompare(int a,int b){
            	HX_STACKFRAME(&_hx_pos_fb6f0e500ad2c7ae_253_ucompare)
HXLINE( 254)		if ((a < 0)) {
HXLINE( 255)			if ((b < 0)) {
HXLINE( 255)				return (~(b) - ~(a));
            			}
            			else {
HXLINE( 255)				return 1;
            			}
            		}
HXLINE( 256)		if ((b < 0)) {
HXLINE( 256)			return -1;
            		}
            		else {
HXLINE( 256)			return (a - b);
            		}
HXDLIN( 256)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Int32_Impl__obj,ucompare,return )

int Int32_Impl__obj::clamp(int x){
            	HX_STACKFRAME(&_hx_pos_fb6f0e500ad2c7ae_278_clamp)
HXDLIN( 278)		return x;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Int32_Impl__obj,clamp,return )


Int32_Impl__obj::Int32_Impl__obj()
{
}

bool Int32_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { outValue = add_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sub") ) { outValue = sub_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"clamp") ) { outValue = clamp_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"negate") ) { outValue = negate_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"addInt") ) { outValue = addInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"subInt") ) { outValue = subInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"intSub") ) { outValue = intSub_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"toFloat") ) { outValue = toFloat_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"ucompare") ) { outValue = ucompare_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"preIncrement") ) { outValue = preIncrement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"preDecrement") ) { outValue = preDecrement_dyn(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"postIncrement") ) { outValue = postIncrement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"postDecrement") ) { outValue = postDecrement_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Int32_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Int32_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class Int32_Impl__obj::__mClass;

static ::String Int32_Impl__obj_sStaticFields[] = {
	HX_("negate",c2,41,19,67),
	HX_("preIncrement",8c,e9,fe,d7),
	HX_("postIncrement",af,d5,b1,df),
	HX_("preDecrement",70,d9,81,b6),
	HX_("postDecrement",93,c5,34,be),
	HX_("add",21,f2,49,00),
	HX_("addInt",4e,1d,01,9f),
	HX_("sub",80,a9,57,00),
	HX_("subInt",4f,0b,eb,99),
	HX_("intSub",d1,d3,78,9e),
	HX_("toFloat",21,12,1b,cf),
	HX_("ucompare",d0,40,77,a7),
	HX_("clamp",fb,72,58,48),
	::String(null())
};

void Int32_Impl__obj::__register()
{
	Int32_Impl__obj _hx_dummy;
	Int32_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("haxe._Int32.Int32_Impl_",17,9d,21,ce);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Int32_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Int32_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Int32_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Int32_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Int32_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace haxe
} // end namespace _Int32
