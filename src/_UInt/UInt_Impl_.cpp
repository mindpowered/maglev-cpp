// Generated by Haxe 4.1.1
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <maglev/Std.h>
#endif
#ifndef INCLUDED__UInt_UInt_Impl_
#include <maglev/_UInt/UInt_Impl_.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_135_add,"_UInt.UInt_Impl_","add",0x721d7cc2,"_UInt.UInt_Impl_.add","/opt/haxe/std/UInt.hx",135,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_139_div,"_UInt.UInt_Impl_","div",0x721fc7f2,"_UInt.UInt_Impl_.div","/opt/haxe/std/UInt.hx",139,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_143_mul,"_UInt.UInt_Impl_","mul",0x7226a6a5,"_UInt.UInt_Impl_.mul","/opt/haxe/std/UInt.hx",143,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_147_sub,"_UInt.UInt_Impl_","sub",0x722b3421,"_UInt.UInt_Impl_.sub","/opt/haxe/std/UInt.hx",147,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_151_gt,"_UInt.UInt_Impl_","gt",0x5204beac,"_UInt.UInt_Impl_.gt","/opt/haxe/std/UInt.hx",151,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_158_gte,"_UInt.UInt_Impl_","gte",0x72221839,"_UInt.UInt_Impl_.gte","/opt/haxe/std/UInt.hx",158,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_165_lt,"_UInt.UInt_Impl_","lt",0x5204c307,"_UInt.UInt_Impl_.lt","/opt/haxe/std/UInt.hx",165,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_169_lte,"_UInt.UInt_Impl_","lte",0x7225e37e,"_UInt.UInt_Impl_.lte","/opt/haxe/std/UInt.hx",169,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_173_and,"_UInt.UInt_Impl_","and",0x721d8578,"_UInt.UInt_Impl_.and","/opt/haxe/std/UInt.hx",173,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_177_or,"_UInt.UInt_Impl_","or",0x5204c5a2,"_UInt.UInt_Impl_.or","/opt/haxe/std/UInt.hx",177,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_181_xor,"_UInt.UInt_Impl_","xor",0x722efa3c,"_UInt.UInt_Impl_.xor","/opt/haxe/std/UInt.hx",181,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_185_shl,"_UInt.UInt_Impl_","shl",0x722b28d8,"_UInt.UInt_Impl_.shl","/opt/haxe/std/UInt.hx",185,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_189_shr,"_UInt.UInt_Impl_","shr",0x722b28de,"_UInt.UInt_Impl_.shr","/opt/haxe/std/UInt.hx",189,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_193_ushr,"_UInt.UInt_Impl_","ushr",0x74f35727,"_UInt.UInt_Impl_.ushr","/opt/haxe/std/UInt.hx",193,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_197_mod,"_UInt.UInt_Impl_","mod",0x7226a163,"_UInt.UInt_Impl_.mod","/opt/haxe/std/UInt.hx",197,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_201_addWithFloat,"_UInt.UInt_Impl_","addWithFloat",0xd518e494,"_UInt.UInt_Impl_.addWithFloat","/opt/haxe/std/UInt.hx",201,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_205_mulWithFloat,"_UInt.UInt_Impl_","mulWithFloat",0x7b2ae651,"_UInt.UInt_Impl_.mulWithFloat","/opt/haxe/std/UInt.hx",205,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_209_divFloat,"_UInt.UInt_Impl_","divFloat",0xda70604a,"_UInt.UInt_Impl_.divFloat","/opt/haxe/std/UInt.hx",209,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_213_floatDiv,"_UInt.UInt_Impl_","floatDiv",0x8e10e6d4,"_UInt.UInt_Impl_.floatDiv","/opt/haxe/std/UInt.hx",213,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_217_subFloat,"_UInt.UInt_Impl_","subFloat",0x284369bb,"_UInt.UInt_Impl_.subFloat","/opt/haxe/std/UInt.hx",217,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_221_floatSub,"_UInt.UInt_Impl_","floatSub",0x8e1c5303,"_UInt.UInt_Impl_.floatSub","/opt/haxe/std/UInt.hx",221,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_225_gtFloat,"_UInt.UInt_Impl_","gtFloat",0x0930c750,"_UInt.UInt_Impl_.gtFloat","/opt/haxe/std/UInt.hx",225,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_229_equalsInt,"_UInt.UInt_Impl_","equalsInt",0x8908c151,"_UInt.UInt_Impl_.equalsInt","/opt/haxe/std/UInt.hx",229,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_233_notEqualsInt,"_UInt.UInt_Impl_","notEqualsInt",0xf1756d9c,"_UInt.UInt_Impl_.notEqualsInt","/opt/haxe/std/UInt.hx",233,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_237_equalsFloat,"_UInt.UInt_Impl_","equalsFloat",0xb22ed67e,"_UInt.UInt_Impl_.equalsFloat","/opt/haxe/std/UInt.hx",237,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_241_notEqualsFloat,"_UInt.UInt_Impl_","notEqualsFloat",0x90576b89,"_UInt.UInt_Impl_.notEqualsFloat","/opt/haxe/std/UInt.hx",241,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_245_gteFloat,"_UInt.UInt_Impl_","gteFloat",0x8362aea3,"_UInt.UInt_Impl_.gteFloat","/opt/haxe/std/UInt.hx",245,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_249_floatGt,"_UInt.UInt_Impl_","floatGt",0x40ec920a,"_UInt.UInt_Impl_.floatGt","/opt/haxe/std/UInt.hx",249,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_253_floatGte,"_UInt.UInt_Impl_","floatGte",0x8e13371b,"_UInt.UInt_Impl_.floatGte","/opt/haxe/std/UInt.hx",253,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_257_ltFloat,"_UInt.UInt_Impl_","ltFloat",0xd91c1915,"_UInt.UInt_Impl_.ltFloat","/opt/haxe/std/UInt.hx",257,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_261_lteFloat,"_UInt.UInt_Impl_","lteFloat",0xa15ee93e,"_UInt.UInt_Impl_.lteFloat","/opt/haxe/std/UInt.hx",261,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_265_floatLt,"_UInt.UInt_Impl_","floatLt",0x40ec9665,"_UInt.UInt_Impl_.floatLt","/opt/haxe/std/UInt.hx",265,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_269_floatLte,"_UInt.UInt_Impl_","floatLte",0x8e170260,"_UInt.UInt_Impl_.floatLte","/opt/haxe/std/UInt.hx",269,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_273_modFloat,"_UInt.UInt_Impl_","modFloat",0xa44aad39,"_UInt.UInt_Impl_.modFloat","/opt/haxe/std/UInt.hx",273,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_277_floatMod,"_UInt.UInt_Impl_","floatMod",0x8e17c045,"_UInt.UInt_Impl_.floatMod","/opt/haxe/std/UInt.hx",277,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_281_negBits,"_UInt.UInt_Impl_","negBits",0x115e4e97,"_UInt.UInt_Impl_.negBits","/opt/haxe/std/UInt.hx",281,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_285_prefixIncrement,"_UInt.UInt_Impl_","prefixIncrement",0x6c79c25e,"_UInt.UInt_Impl_.prefixIncrement","/opt/haxe/std/UInt.hx",285,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_289_postfixIncrement,"_UInt.UInt_Impl_","postfixIncrement",0x55bafab9,"_UInt.UInt_Impl_.postfixIncrement","/opt/haxe/std/UInt.hx",289,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_293_prefixDecrement,"_UInt.UInt_Impl_","prefixDecrement",0x4afcb242,"_UInt.UInt_Impl_.prefixDecrement","/opt/haxe/std/UInt.hx",293,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_297_postfixDecrement,"_UInt.UInt_Impl_","postfixDecrement",0x343dea9d,"_UInt.UInt_Impl_.postfixDecrement","/opt/haxe/std/UInt.hx",297,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_302_toString,"_UInt.UInt_Impl_","toString",0xe8fc1e6b,"_UInt.UInt_Impl_.toString","/opt/haxe/std/UInt.hx",302,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_306_toInt,"_UInt.UInt_Impl_","toInt",0x49d5f315,"_UInt.UInt_Impl_.toInt","/opt/haxe/std/UInt.hx",306,0xdee7de5a)
HX_LOCAL_STACK_FRAME(_hx_pos_bed2f9fcc38c1445_309_toFloat,"_UInt.UInt_Impl_","toFloat",0x25ff0142,"_UInt.UInt_Impl_.toFloat","/opt/haxe/std/UInt.hx",309,0xdee7de5a)
namespace _UInt{

void UInt_Impl__obj::__construct() { }

Dynamic UInt_Impl__obj::__CreateEmpty() { return new UInt_Impl__obj; }

void *UInt_Impl__obj::_hx_vtable = 0;

Dynamic UInt_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< UInt_Impl__obj > _hx_result = new UInt_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool UInt_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7fc52e87;
}

int UInt_Impl__obj::add(int a,int b){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_135_add)
HXDLIN( 135)		return (a + b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UInt_Impl__obj,add,return )

Float UInt_Impl__obj::div(int a,int b){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_139_div)
HXDLIN( 139)		int _hx_int = a;
HXDLIN( 139)		Float _hx_tmp;
HXDLIN( 139)		if ((_hx_int < 0)) {
HXDLIN( 139)			_hx_tmp = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXDLIN( 139)			_hx_tmp = (_hx_int + ((Float)0.0));
            		}
HXDLIN( 139)		int int1 = b;
HXDLIN( 139)		Float _hx_tmp1;
HXDLIN( 139)		if ((int1 < 0)) {
HXDLIN( 139)			_hx_tmp1 = (((Float)4294967296.0) + int1);
            		}
            		else {
HXDLIN( 139)			_hx_tmp1 = (int1 + ((Float)0.0));
            		}
HXDLIN( 139)		return (_hx_tmp / _hx_tmp1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UInt_Impl__obj,div,return )

int UInt_Impl__obj::mul(int a,int b){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_143_mul)
HXDLIN( 143)		return (a * b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UInt_Impl__obj,mul,return )

int UInt_Impl__obj::sub(int a,int b){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_147_sub)
HXDLIN( 147)		return (a - b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UInt_Impl__obj,sub,return )

bool UInt_Impl__obj::gt(int a,int b){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_151_gt)
HXLINE( 152)		bool aNeg = (a < 0);
HXLINE( 153)		bool bNeg = (b < 0);
HXLINE( 154)		if ((aNeg != bNeg)) {
HXLINE( 154)			return aNeg;
            		}
            		else {
HXLINE( 154)			return (a > b);
            		}
HXDLIN( 154)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UInt_Impl__obj,gt,return )

bool UInt_Impl__obj::gte(int a,int b){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_158_gte)
HXLINE( 159)		bool aNeg = (a < 0);
HXLINE( 160)		bool bNeg = (b < 0);
HXLINE( 161)		if ((aNeg != bNeg)) {
HXLINE( 161)			return aNeg;
            		}
            		else {
HXLINE( 161)			return (a >= b);
            		}
HXDLIN( 161)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UInt_Impl__obj,gte,return )

bool UInt_Impl__obj::lt(int a,int b){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_165_lt)
HXDLIN( 165)		bool aNeg = (b < 0);
HXDLIN( 165)		bool bNeg = (a < 0);
HXDLIN( 165)		if ((aNeg != bNeg)) {
HXDLIN( 165)			return aNeg;
            		}
            		else {
HXDLIN( 165)			return (b > a);
            		}
HXDLIN( 165)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UInt_Impl__obj,lt,return )

bool UInt_Impl__obj::lte(int a,int b){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_169_lte)
HXDLIN( 169)		bool aNeg = (b < 0);
HXDLIN( 169)		bool bNeg = (a < 0);
HXDLIN( 169)		if ((aNeg != bNeg)) {
HXDLIN( 169)			return aNeg;
            		}
            		else {
HXDLIN( 169)			return (b >= a);
            		}
HXDLIN( 169)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UInt_Impl__obj,lte,return )

int UInt_Impl__obj::_hx_and(int a,int b){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_173_and)
HXDLIN( 173)		return (a & b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UInt_Impl__obj,_hx_and,return )

int UInt_Impl__obj::_hx_or(int a,int b){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_177_or)
HXDLIN( 177)		return (a | b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UInt_Impl__obj,_hx_or,return )

int UInt_Impl__obj::_hx_xor(int a,int b){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_181_xor)
HXDLIN( 181)		return (a ^ b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UInt_Impl__obj,_hx_xor,return )

int UInt_Impl__obj::shl(int a,int b){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_185_shl)
HXDLIN( 185)		return (a << b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UInt_Impl__obj,shl,return )

int UInt_Impl__obj::shr(int a,int b){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_189_shr)
HXDLIN( 189)		return ::hx::UShr(a,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UInt_Impl__obj,shr,return )

int UInt_Impl__obj::ushr(int a,int b){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_193_ushr)
HXDLIN( 193)		return ::hx::UShr(a,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UInt_Impl__obj,ushr,return )

int UInt_Impl__obj::mod(int a,int b){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_197_mod)
HXDLIN( 197)		int _hx_int = a;
HXDLIN( 197)		Float _hx_tmp;
HXDLIN( 197)		if ((_hx_int < 0)) {
HXDLIN( 197)			_hx_tmp = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXDLIN( 197)			_hx_tmp = (_hx_int + ((Float)0.0));
            		}
HXDLIN( 197)		int int1 = b;
HXDLIN( 197)		Float _hx_tmp1;
HXDLIN( 197)		if ((int1 < 0)) {
HXDLIN( 197)			_hx_tmp1 = (((Float)4294967296.0) + int1);
            		}
            		else {
HXDLIN( 197)			_hx_tmp1 = (int1 + ((Float)0.0));
            		}
HXDLIN( 197)		return ::Std_obj::_hx_int(::hx::Mod(_hx_tmp,_hx_tmp1));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UInt_Impl__obj,mod,return )

Float UInt_Impl__obj::addWithFloat(int a,Float b){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_201_addWithFloat)
HXDLIN( 201)		int _hx_int = a;
HXDLIN( 201)		Float _hx_tmp;
HXDLIN( 201)		if ((_hx_int < 0)) {
HXDLIN( 201)			_hx_tmp = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXDLIN( 201)			_hx_tmp = (_hx_int + ((Float)0.0));
            		}
HXDLIN( 201)		return (_hx_tmp + b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UInt_Impl__obj,addWithFloat,return )

Float UInt_Impl__obj::mulWithFloat(int a,Float b){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_205_mulWithFloat)
HXDLIN( 205)		int _hx_int = a;
HXDLIN( 205)		Float _hx_tmp;
HXDLIN( 205)		if ((_hx_int < 0)) {
HXDLIN( 205)			_hx_tmp = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXDLIN( 205)			_hx_tmp = (_hx_int + ((Float)0.0));
            		}
HXDLIN( 205)		return (_hx_tmp * b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UInt_Impl__obj,mulWithFloat,return )

Float UInt_Impl__obj::divFloat(int a,Float b){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_209_divFloat)
HXDLIN( 209)		int _hx_int = a;
HXDLIN( 209)		Float _hx_tmp;
HXDLIN( 209)		if ((_hx_int < 0)) {
HXDLIN( 209)			_hx_tmp = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXDLIN( 209)			_hx_tmp = (_hx_int + ((Float)0.0));
            		}
HXDLIN( 209)		return (_hx_tmp / b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UInt_Impl__obj,divFloat,return )

Float UInt_Impl__obj::floatDiv(Float a,int b){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_213_floatDiv)
HXDLIN( 213)		int _hx_int = b;
HXDLIN( 213)		Float _hx_tmp;
HXDLIN( 213)		if ((_hx_int < 0)) {
HXDLIN( 213)			_hx_tmp = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXDLIN( 213)			_hx_tmp = (_hx_int + ((Float)0.0));
            		}
HXDLIN( 213)		return (a / _hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UInt_Impl__obj,floatDiv,return )

Float UInt_Impl__obj::subFloat(int a,Float b){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_217_subFloat)
HXDLIN( 217)		int _hx_int = a;
HXDLIN( 217)		Float _hx_tmp;
HXDLIN( 217)		if ((_hx_int < 0)) {
HXDLIN( 217)			_hx_tmp = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXDLIN( 217)			_hx_tmp = (_hx_int + ((Float)0.0));
            		}
HXDLIN( 217)		return (_hx_tmp - b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UInt_Impl__obj,subFloat,return )

Float UInt_Impl__obj::floatSub(Float a,int b){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_221_floatSub)
HXDLIN( 221)		int _hx_int = b;
HXDLIN( 221)		Float _hx_tmp;
HXDLIN( 221)		if ((_hx_int < 0)) {
HXDLIN( 221)			_hx_tmp = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXDLIN( 221)			_hx_tmp = (_hx_int + ((Float)0.0));
            		}
HXDLIN( 221)		return (a - _hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UInt_Impl__obj,floatSub,return )

bool UInt_Impl__obj::gtFloat(int a,Float b){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_225_gtFloat)
HXDLIN( 225)		int _hx_int = a;
HXDLIN( 225)		Float _hx_tmp;
HXDLIN( 225)		if ((_hx_int < 0)) {
HXDLIN( 225)			_hx_tmp = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXDLIN( 225)			_hx_tmp = (_hx_int + ((Float)0.0));
            		}
HXDLIN( 225)		return (_hx_tmp > b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UInt_Impl__obj,gtFloat,return )

bool UInt_Impl__obj::equalsInt(int a, ::Dynamic b){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_229_equalsInt)
HXDLIN( 229)		return ::hx::IsEq( a,b );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UInt_Impl__obj,equalsInt,return )

bool UInt_Impl__obj::notEqualsInt(int a, ::Dynamic b){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_233_notEqualsInt)
HXDLIN( 233)		return ::hx::IsNotEq( a,b );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UInt_Impl__obj,notEqualsInt,return )

bool UInt_Impl__obj::equalsFloat(int a, ::Dynamic b){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_237_equalsFloat)
HXDLIN( 237)		int _hx_int = a;
HXDLIN( 237)		Float _hx_tmp;
HXDLIN( 237)		if ((_hx_int < 0)) {
HXDLIN( 237)			_hx_tmp = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXDLIN( 237)			_hx_tmp = (_hx_int + ((Float)0.0));
            		}
HXDLIN( 237)		return ::hx::IsEq( _hx_tmp,b );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UInt_Impl__obj,equalsFloat,return )

bool UInt_Impl__obj::notEqualsFloat(int a, ::Dynamic b){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_241_notEqualsFloat)
HXDLIN( 241)		int _hx_int = a;
HXDLIN( 241)		Float _hx_tmp;
HXDLIN( 241)		if ((_hx_int < 0)) {
HXDLIN( 241)			_hx_tmp = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXDLIN( 241)			_hx_tmp = (_hx_int + ((Float)0.0));
            		}
HXDLIN( 241)		return ::hx::IsNotEq( _hx_tmp,b );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UInt_Impl__obj,notEqualsFloat,return )

bool UInt_Impl__obj::gteFloat(int a,Float b){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_245_gteFloat)
HXDLIN( 245)		int _hx_int = a;
HXDLIN( 245)		Float _hx_tmp;
HXDLIN( 245)		if ((_hx_int < 0)) {
HXDLIN( 245)			_hx_tmp = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXDLIN( 245)			_hx_tmp = (_hx_int + ((Float)0.0));
            		}
HXDLIN( 245)		return (_hx_tmp >= b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UInt_Impl__obj,gteFloat,return )

bool UInt_Impl__obj::floatGt(Float a,int b){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_249_floatGt)
HXDLIN( 249)		int _hx_int = b;
HXDLIN( 249)		Float _hx_tmp;
HXDLIN( 249)		if ((_hx_int < 0)) {
HXDLIN( 249)			_hx_tmp = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXDLIN( 249)			_hx_tmp = (_hx_int + ((Float)0.0));
            		}
HXDLIN( 249)		return (a > _hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UInt_Impl__obj,floatGt,return )

bool UInt_Impl__obj::floatGte(Float a,int b){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_253_floatGte)
HXDLIN( 253)		int _hx_int = b;
HXDLIN( 253)		Float _hx_tmp;
HXDLIN( 253)		if ((_hx_int < 0)) {
HXDLIN( 253)			_hx_tmp = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXDLIN( 253)			_hx_tmp = (_hx_int + ((Float)0.0));
            		}
HXDLIN( 253)		return (a >= _hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UInt_Impl__obj,floatGte,return )

bool UInt_Impl__obj::ltFloat(int a,Float b){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_257_ltFloat)
HXDLIN( 257)		int _hx_int = a;
HXDLIN( 257)		Float _hx_tmp;
HXDLIN( 257)		if ((_hx_int < 0)) {
HXDLIN( 257)			_hx_tmp = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXDLIN( 257)			_hx_tmp = (_hx_int + ((Float)0.0));
            		}
HXDLIN( 257)		return (_hx_tmp < b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UInt_Impl__obj,ltFloat,return )

bool UInt_Impl__obj::lteFloat(int a,Float b){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_261_lteFloat)
HXDLIN( 261)		int _hx_int = a;
HXDLIN( 261)		Float _hx_tmp;
HXDLIN( 261)		if ((_hx_int < 0)) {
HXDLIN( 261)			_hx_tmp = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXDLIN( 261)			_hx_tmp = (_hx_int + ((Float)0.0));
            		}
HXDLIN( 261)		return (_hx_tmp <= b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UInt_Impl__obj,lteFloat,return )

bool UInt_Impl__obj::floatLt(Float a,int b){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_265_floatLt)
HXDLIN( 265)		int _hx_int = b;
HXDLIN( 265)		Float _hx_tmp;
HXDLIN( 265)		if ((_hx_int < 0)) {
HXDLIN( 265)			_hx_tmp = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXDLIN( 265)			_hx_tmp = (_hx_int + ((Float)0.0));
            		}
HXDLIN( 265)		return (a < _hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UInt_Impl__obj,floatLt,return )

bool UInt_Impl__obj::floatLte(Float a,int b){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_269_floatLte)
HXDLIN( 269)		int _hx_int = b;
HXDLIN( 269)		Float _hx_tmp;
HXDLIN( 269)		if ((_hx_int < 0)) {
HXDLIN( 269)			_hx_tmp = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXDLIN( 269)			_hx_tmp = (_hx_int + ((Float)0.0));
            		}
HXDLIN( 269)		return (a <= _hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UInt_Impl__obj,floatLte,return )

Float UInt_Impl__obj::modFloat(int a,Float b){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_273_modFloat)
HXDLIN( 273)		int _hx_int = a;
HXDLIN( 273)		Float _hx_tmp;
HXDLIN( 273)		if ((_hx_int < 0)) {
HXDLIN( 273)			_hx_tmp = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXDLIN( 273)			_hx_tmp = (_hx_int + ((Float)0.0));
            		}
HXDLIN( 273)		return ::hx::Mod(_hx_tmp,b);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UInt_Impl__obj,modFloat,return )

Float UInt_Impl__obj::floatMod(Float a,int b){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_277_floatMod)
HXDLIN( 277)		int _hx_int = b;
HXDLIN( 277)		Float _hx_tmp;
HXDLIN( 277)		if ((_hx_int < 0)) {
HXDLIN( 277)			_hx_tmp = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXDLIN( 277)			_hx_tmp = (_hx_int + ((Float)0.0));
            		}
HXDLIN( 277)		return ::hx::Mod(a,_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UInt_Impl__obj,floatMod,return )

int UInt_Impl__obj::negBits(int this1){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_281_negBits)
HXDLIN( 281)		return ~(this1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(UInt_Impl__obj,negBits,return )

int UInt_Impl__obj::prefixIncrement(int this1){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_285_prefixIncrement)
HXDLIN( 285)		this1 = (this1 + 1);
HXDLIN( 285)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(UInt_Impl__obj,prefixIncrement,return )

int UInt_Impl__obj::postfixIncrement(int this1){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_289_postfixIncrement)
HXDLIN( 289)		this1 = (this1 + 1);
HXDLIN( 289)		return (this1 - 1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(UInt_Impl__obj,postfixIncrement,return )

int UInt_Impl__obj::prefixDecrement(int this1){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_293_prefixDecrement)
HXDLIN( 293)		this1 = (this1 - 1);
HXDLIN( 293)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(UInt_Impl__obj,prefixDecrement,return )

int UInt_Impl__obj::postfixDecrement(int this1){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_297_postfixDecrement)
HXDLIN( 297)		this1 = (this1 - 1);
HXDLIN( 297)		return (this1 + 1);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(UInt_Impl__obj,postfixDecrement,return )

::String UInt_Impl__obj::toString(int this1, ::Dynamic radix){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_302_toString)
HXDLIN( 302)		int _hx_int = this1;
HXDLIN( 302)		Float _hx_tmp;
HXDLIN( 302)		if ((_hx_int < 0)) {
HXDLIN( 302)			_hx_tmp = (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXDLIN( 302)			_hx_tmp = (_hx_int + ((Float)0.0));
            		}
HXDLIN( 302)		return ::Std_obj::string(_hx_tmp);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(UInt_Impl__obj,toString,return )

int UInt_Impl__obj::toInt(int this1){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_306_toInt)
HXDLIN( 306)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(UInt_Impl__obj,toInt,return )

Float UInt_Impl__obj::toFloat(int this1){
            	HX_STACKFRAME(&_hx_pos_bed2f9fcc38c1445_309_toFloat)
HXLINE( 310)		int _hx_int = this1;
HXLINE( 311)		if ((_hx_int < 0)) {
HXLINE( 312)			return (((Float)4294967296.0) + _hx_int);
            		}
            		else {
HXLINE( 316)			return (_hx_int + ((Float)0.0));
            		}
HXLINE( 311)		return ((Float)0.);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(UInt_Impl__obj,toFloat,return )


UInt_Impl__obj::UInt_Impl__obj()
{
}

bool UInt_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"gt") ) { outValue = gt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lt") ) { outValue = lt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"or") ) { outValue = _hx_or_dyn(); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { outValue = add_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"div") ) { outValue = div_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mul") ) { outValue = mul_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"sub") ) { outValue = sub_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gte") ) { outValue = gte_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lte") ) { outValue = lte_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"and") ) { outValue = _hx_and_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"xor") ) { outValue = _hx_xor_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"shl") ) { outValue = shl_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"shr") ) { outValue = shr_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mod") ) { outValue = mod_dyn(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"ushr") ) { outValue = ushr_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"toInt") ) { outValue = toInt_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"gtFloat") ) { outValue = gtFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"floatGt") ) { outValue = floatGt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"ltFloat") ) { outValue = ltFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"floatLt") ) { outValue = floatLt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"negBits") ) { outValue = negBits_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toFloat") ) { outValue = toFloat_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"divFloat") ) { outValue = divFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"floatDiv") ) { outValue = floatDiv_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"subFloat") ) { outValue = subFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"floatSub") ) { outValue = floatSub_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"gteFloat") ) { outValue = gteFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"floatGte") ) { outValue = floatGte_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"lteFloat") ) { outValue = lteFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"floatLte") ) { outValue = floatLte_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"modFloat") ) { outValue = modFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"floatMod") ) { outValue = floatMod_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"equalsInt") ) { outValue = equalsInt_dyn(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"equalsFloat") ) { outValue = equalsFloat_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"addWithFloat") ) { outValue = addWithFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"mulWithFloat") ) { outValue = mulWithFloat_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"notEqualsInt") ) { outValue = notEqualsInt_dyn(); return true; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"notEqualsFloat") ) { outValue = notEqualsFloat_dyn(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"prefixIncrement") ) { outValue = prefixIncrement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"prefixDecrement") ) { outValue = prefixDecrement_dyn(); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"postfixIncrement") ) { outValue = postfixIncrement_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"postfixDecrement") ) { outValue = postfixDecrement_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *UInt_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *UInt_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class UInt_Impl__obj::__mClass;

static ::String UInt_Impl__obj_sStaticFields[] = {
	HX_("add",21,f2,49,00),
	HX_("div",51,3d,4c,00),
	HX_("mul",04,1c,53,00),
	HX_("sub",80,a9,57,00),
	HX_("gt",2d,5a,00,00),
	HX_("gte",98,8d,4e,00),
	HX_("lt",88,5e,00,00),
	HX_("lte",dd,58,52,00),
	HX_("and",d7,fa,49,00),
	HX_("or",23,61,00,00),
	HX_("xor",9b,6f,5b,00),
	HX_("shl",37,9e,57,00),
	HX_("shr",3d,9e,57,00),
	HX_("ushr",e8,94,ad,4d),
	HX_("mod",c2,16,53,00),
	HX_("addWithFloat",55,4b,d8,85),
	HX_("mulWithFloat",12,4d,ea,2b),
	HX_("divFloat",8b,12,e3,29),
	HX_("floatDiv",15,99,83,dd),
	HX_("subFloat",fc,1b,b6,77),
	HX_("floatSub",44,05,8f,dd),
	HX_("gtFloat",2f,d8,4c,b2),
	HX_("equalsInt",f0,07,f2,bd),
	HX_("notEqualsInt",5d,d4,34,a2),
	HX_("equalsFloat",dd,42,ee,e8),
	HX_("notEqualsFloat",8a,c4,ce,7c),
	HX_("gteFloat",e4,60,d5,d2),
	HX_("floatGt",e9,a2,08,ea),
	HX_("floatGte",5c,e9,85,dd),
	HX_("ltFloat",f4,29,38,82),
	HX_("lteFloat",7f,9b,d1,f0),
	HX_("floatLt",44,a7,08,ea),
	HX_("floatLte",a1,b4,89,dd),
	HX_("modFloat",7a,5f,bd,f3),
	HX_("floatMod",86,72,8a,dd),
	HX_("negBits",76,5f,7a,ba),
	HX_("prefixIncrement",3d,4a,70,68),
	HX_("postfixIncrement",fa,55,7b,d1),
	HX_("prefixDecrement",21,3a,f3,46),
	HX_("postfixDecrement",de,45,fe,af),
	HX_("toString",ac,d0,6e,38),
	HX_("toInt",34,be,11,14),
	HX_("toFloat",21,12,1b,cf),
	::String(null())
};

void UInt_Impl__obj::__register()
{
	UInt_Impl__obj _hx_dummy;
	UInt_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("_UInt.UInt_Impl_",8f,c6,c3,88);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &UInt_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(UInt_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< UInt_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = UInt_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = UInt_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace _UInt
